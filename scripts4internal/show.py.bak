#!/usr/local/bin/python3.9
import os
import subprocess as sp
import logging
import argparse
from glob import glob
import re
from os.path import exists as file_exists
from urllib import request, parse
import json
import ast
import time
from datetime import datetime, timedelta
import ssl
import csv
from itertools import zip_longest

# Disable SSL certificate validation globally
ssl._create_default_https_context = ssl._create_unverified_context

# Preparing Required color codes
class style():
    BLACK = '\033[30m'
    RED = '\033[31m'
    LIGHTRED = '\033[0;91m'
    GREEN = '\033[32m'
    LIGHTGREEN = '\033[0;92m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    UNDERLINE = '\033[4m'
    RESET = '\033[0m'

print("\n\n" + "Check out the new features related to "+ style.LIGHTGREEN + "ADM support bundle!" + style.RESET + " Use show --help to learn more\n")

# About Author
showscriptauthor = '''
___  ___            _           _       _____      _   _
|  \/  |           (_)         | |     /  ___|    | | | |
| .  . | __ _ _ __  _  ___  ___| |__   \ `--.  ___| |_| |_ _   _
| |\/| |/ _` | '_ \| |/ _ \/ __| '_ \   `--. \/ _ \ __| __| | | |
| |  | | (_| | | | | |  __/\__ \ | | | /\__/ /  __/ |_| |_| |_| |
\_|  |_/\__,_|_| |_| |\___||___/_| |_| \____/ \___|\__|\__|\__, |
                  _/ |                                      __/ |
                 |__/                                      |___/
#################################################################
##                                                             ##
##     Script credit: Manjesh Setty | manjesh.n@citrix.com     ##
##                                                             ##
#################################################################
'''

# tooltrack data
url = 'https://tooltrack.deva.citrite.net/use/conFetch'
headers = {'Content-Type': 'application/json'}
version = "10.05"

# About script
showscriptabout = '''

  _____           _           _                     ______   _       _     
 |  __ \         (_)         | |                   |  ____| | |     | |    
 | |__) | __ ___  _  ___  ___| |_    ___ ___  _ __ | |__ ___| |_ ___| |__  
 |  ___/ '__/ _ \| |/ _ \/ __| __|  / __/ _ \| '_ \|  __/ _ \ __/ __| '_ \ 
 | |   | | | (_) | |  __/ (__| |_  | (_| (_) | | | | | |  __/ || (__| | | |
 |_|   |_|  \___/| |\___|\___|\__|  \___\___/|_| |_|_|  \___|\__\___|_| |_|
                _/ |                                                       
               |__/                                                        

######################################################################################################
##                                                                                                  ##
##   Note -- Please do not use this script if you are not sure of what you are doing.               ##
##   Product -- Only for NetScaler TAC Use.                                                         ##
##   Unauthorized usage of this script / sharing for personal use will be considered as offence.    ##
##   This script is designed to extract data from support bundle -- "script based troubleshooting". ##
##                                                                                                  ##
##                                                                                                  ##
##                                      Version:  ''' + version + '''                                              ##
##                   https://info.citrite.net/display/supp/Project_conFetch                         ##
##                                                                                                  ##
##                                                                                                  ##
##                                    show --author                                                 ##
##                                                                                                  ##
######################################################################################################
'''

# Logme the user
username = os.popen("whoami").read().strip()
userfile = "/home/CITRITE/manjeshn/manscript/showdata/"+username+".log"
logging.basicConfig(filename=userfile, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

# Tooltrack send data function (embeded with fail proof)
def send_request(version, username, url, fate_message, result):
    payload = {"version": version, "user": username, "action": f"{fate_message} --> {os.getcwd()} --> {int(time.time())}", "runtime": 0, "result": result, "format": "string", "sr": os.getcwd().split("/")[3]}
    try:
        data = json.dumps(payload).encode()
        req = request.Request(url, data=data, headers=headers)
        with request.urlopen(req, timeout=3) as response:
            response_text = response.read().decode()
    finally:
        return True

# Parser args
parser = argparse.ArgumentParser(description="NetScaler Support Bundle Show Script", formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('--author', action="store_true", help=argparse.SUPPRESS)
parser.add_argument('-i', action="store_true", help="NetScaler Basic Information")
parser.add_argument('-P', action="store_true", help="NetScaler Admin Partition Details")
parser.add_argument('-n', action="store_true", help="NetScaler Networking Information")
parser.add_argument('-p', action="store_true", help="NetScaler Process Related Information")
parser.add_argument('-r', action="store_true", help="NetScaler Reboot Timestamps")
parser.add_argument('-c', metavar="", help="Display all possible counter names within newnslog")
parser.add_argument('-E', action="store_true", help="Match well known error with KB articles")
parser.add_argument('-fw', action="store_true", help="Display Latest RTM Firmware Code")
parser.add_argument('-gz', action="store_true", help="Unzip *.gz files under /var/log and var/nslog")
parser.add_argument('-im', action="store_true",help="Indexing timestamp of ns.log")
parser.add_argument('-imall', action="store_true", help="Indexing timestamp of logs including ns, auth, bash, nitro, notice, nsvpn, sh, newnslogs")
parser.add_argument('-N', action="store_true", help="Display newnslog Start and End Time in both GMT and Local Timezone")
parser.add_argument('-error', metavar="", help="Highlights known errors")
parser.add_argument('-show', metavar="", help="Selected Show Commands")
parser.add_argument('-stat', metavar="", help="Selected Stat Commands")
parser.add_argument('-vip', action="store_true", help="Get VIP Basic Details")
parser.add_argument('--lbvip', metavar="", help="Get VIP Bindings for a specific VIP name")
parser.add_argument('-v', action="store_true", help="ns.conf Version and Last Saved")
parser.add_argument('-u', action="store_true", help="NetScaler Update Build Related Details")
parser.add_argument('-bt', action="store_true", help="Auto bt for both NSPPE and Process core files")
parser.add_argument('-bt1', action="store_true", help="Specify NSPPE Core file absolute path to run a bt")
parser.add_argument('-G', action="append", choices={"cpu", "mem", "ha", "nic"}, help="Generate HTML Graph for all newnslog(s)")
parser.add_argument('-g', action="append", choices={"cpu", "mem", "ha", "nic"}, help="Generate HTML Graph for specific newnslog\n-K <newnslog> --> newnslog Filename\n-s <HH:MM> --> Graph Start Time\n-e <HH:MM> --> Graph End Time")
parser.add_argument('-K', action="append", metavar="newnslog filename", help=argparse.SUPPRESS)
parser.add_argument('-s', action="append", metavar="newnslog starttime", help=argparse.SUPPRESS)
parser.add_argument('-e', action="append", metavar="newnslog endtime", help=argparse.SUPPRESS)
parser.add_argument('-ha', action="store_true", help="HA Analysis (Potential RCA)")
parser.add_argument('-pt', metavar="", action="append", help="Check if the given problem time present in the bundle (\"Aug 02 13:40:00\")")
parser.add_argument('-z', action="append", metavar="", help="Generate HTML Graph for all newnslog(s) at once per user-input counter\n--divide <integer> --> value used to divide 'totalcount-val' in nsconmsg output")
parser.add_argument('--divide', action="append", metavar="divide column 3 by", help=argparse.SUPPRESS)
parser.add_argument('-T', action="append", choices={"ha"}, help="Generate PNG file for specific feature")
parser.add_argument('--cpu', action="store_true", help="Analyse High Mgmt CPU and its potential cause")
parser.add_argument('--mem', action="store_true", help="Analyse High Memory and its potential cause")
parser.add_argument('--nic', action="store_true", help="NIC Specific details")
parser.add_argument('-j', metavar="", nargs="+", help="Search for Jira with Keyword match")
parser.add_argument('-J', metavar="", help="Get Jira Details")
parser.add_argument('--case', action="store_true", help="Salesforce Case Details"+ style.YELLOW)
parser.add_argument('--adm', action="append", choices={"info", "md", "imall", "gz", "apps", "crash", "graph"}, help="ADM Bundles Only\ninfo --> ADM Basic Information\nmd --> ADM Managed Devices\nimall --> Indexing timestamp of all logs\ngz --> Extract all gz files within ADM Support bundle\napps --> List all the vServer and Instance details\ncrash --> List Crash files if available\ngraph --> Plot Cosnole CPU and Memory Graph" + style.RESET)
parser.add_argument('md', action="store_true", help=argparse.SUPPRESS)
parser.add_argument('--about', action="store_true", help="About Show Script")
args = parser.parse_args()

# Set correct support bundle path
if not (args.fw or args.case or args.adm):
    try:
        if (os.popen("pwd").read().index("collector") >= 0):
            os.chdir(re.search('.*\/collecto.*_[0-9]{2}', os.popen("pwd").read()).group(0))
    except AttributeError as e:
        print(style.RED + "Collector Bundle not in Correct Naming Convention" + style.RESET)
        os.chdir(re.search('.*\/collecto.*_[0-9|_|\-|a-zA-Z|\.]{1,30}', os.popen("pwd").read()).group(0))
    except FileNotFoundError as e:
        print(style.RED + "Collector Bundle not in Correct Naming Convention" + style.RESET)
        os.chdir(re.search('.*\/collecto.*_[0-9|_|\-|a-z|\.]{1,30}', os.popen("pwd").read()).group(0))
    except ValueError:
        print("\nPlease navigate to correct support bundle path")
        print("Available directories with support bundle names: \n\n" + style.CYAN + "\n".join(re.findall("collect.*", "\n".join(next(os.walk('.'))[1]))) + style.RESET)
        try:
            fate_message = "Out of Support Bundle"; send_request(version, username, url, fate_message, "Partial")
        finally:
            quit()

# Assign correct files and its path to variables
if not (args.fw or args.case or args.adm):
    try:
        nsconf = "nsconfig/ns.conf"
        showcmd = "shell/showcmds.txt"
        statcmd = "shell/statcmds.txt"
        sysctl = "shell/sysctl-a.out"
        uptime = "shell/uptime.out"
        df = "shell/df-akin.out"
        dmesgboot = "var/nslog/dmesg.boot"
        allrequiredfiles = [nsconf] + [showcmd] + [statcmd] + [sysctl] + [uptime] + [df] + [dmesgboot]
        for i in allrequiredfiles:
            if file_exists(i):
                pass
            else:
                print(style.RED + "File " + i + " is missing from collector pack and script might not work fully !!" + style.RESET)
    finally:
        pass

# For newnslog start and end time
def find_min_max_dates(data):
    # Split the data into lines
    lines = data.strip().split("\n")
    # Initialize lists to store start and end datetimes
    start_times = []
    end_times = []
    # Iterate over each line
    for i in range(0, len(lines), 2):
        start_line = lines[i]
        end_line = lines[i + 1]
        # Extract start and end datetimes from each line
        start_time = datetime.strptime(start_line.split("start time ")[1], "%a %b %d %H:%M:%S %Y")
        end_time = datetime.strptime(end_line.split("end   time ")[1], "%a %b %d %H:%M:%S %Y")
        # Append to respective lists
        start_times.append(start_time.strftime("%b %d %H:%M:%S %Y"))
        end_times.append(end_time.strftime("%b %d %H:%M:%S %Y"))
    # Find min and max dates
    min_date = min(start_times)
    max_date = max(end_times)
    return f"{min_date} --> {max_date}"

# Date age calc
def calculate_age(release_date):
    delta = datetime.now() - release_date
    years = delta.days // 365
    months = (delta.days % 365) // 30
    days = (delta.days % 365) % 30
    return years, months, days

# Unix time to Human time
unix_to_human = lambda unix_time: datetime.fromtimestamp(int(unix_time)).strftime('%b-%d-%Y %H:%M:%S')

# Create conFetch dir
try:
    base_path = "conFetch"
    subdirs = ["nsconmsg", "Graph", "show_output"]
    if not os.path.exists(base_path):
        os.popen("fixperms $PWD").read()
        os.makedirs(base_path)
    for subdir in subdirs:
        full_path = os.path.join(base_path, subdir)
        if not os.path.exists(full_path):
            os.makedirs(full_path)
except Exception as e:
    print(f"An error occurred while creading conFetch base path: {e}")

# ADM section of the script
if args.adm:
    try:
        pwd_output = os.popen("pwd").read().strip()
        if "Citrix_ADM" in pwd_output:
            match = re.search(r'.*Citrix_ADM_.*?\.mps', pwd_output)
            if match:
                os.chdir(match.group(0))
            else:
                print(style.RED + "Pattern not found for 'Citrix_ADM'" + style.RESET)
                quit()
        elif "NetScaler_ADM_" or "NetScaler_MAS_" in pwd_output:
            match = re.search(r'.*NetScaler_(ADM|MAS)_.*?\.mps', pwd_output)
            if match:
                os.chdir(match.group(0))
            else:
                print(style.RED + "Pattern not found for 'NetScaler_ADM'" + style.RESET)
                quit
        else:
            print("\n")
            current_dir = os.getcwd()
            pattern = re.compile(r'.*(NetScaler_ADM|Citrix_ADM).*mps')
            for entry in os.listdir(current_dir):
                entry_path = os.path.join(current_dir, entry)
                if os.path.isdir(entry_path) and pattern.match(entry):
                    print(style.CYAN + entry + style.RESET)
            print(style.RED + "\nPlease make sure to navigate to ADM MPS Directory" + style.RESET)
            quit()
        if "info" in args.adm:
            try:
                admhostname = sp.run("awk '/kern.hostname/{print $NF; exit}' ./shell/sysctl-a.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                admip = sp.run("awk '/ifconfig/{print $(NF-2), $(NF-1), $NF, \"on iface\", $2}' ./var/mps/svm.conf", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                if not admip:
                    admip = sp.run('''awk '/inet/&&/netmask/{print $2; exit}' shell/ifconfig-a.out''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                    if not admip:
                        admip = "NA"
                admcpu = sp.run("awk '/hw.model/ { $1=\"\"; sub(/^ /, \"\"); print }' ./shell/sysctl-a.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                admfirmware = sp.run("awk -F/ '/kern.bootfile/{print $NF}' ./shell/sysctl-a.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                adm_nameserver = sp.run('''awk '/nameserver/{if (c++) {printf \", %s\", $NF} else {printf \"%s\", $NF}}' ./etc/resolv.conf''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                adm_ha_peer_ip = sp.run('''awk '/update_HA_state/{gsub(/'\\''|;/, "", $NF); print $NF; exit}' var/mps/log/mas_hb_monit.py.lo*''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                adm_ha_peer_version_ready_failover = sp.run('''awk '/readyForFailover/&&/receiveHeartbeat/{ match($0, /"Ver": "[^"]+"/); ver=substr($0, RSTART, RLENGTH); match($0, /"readyForFailover": "[^"]+"/); rff=substr($0, RSTART, RLENGTH); printf "%s and %s", ver, rff; exit}' var/mps/log/mas_hb_monit.py.lo* | sed \'s/"//g\' | sed \'s/ T/ True/g\'''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                adm_ha_floating_ip = sp.run("awk '/VIP Running ifconfig/{print $(NF-3); exit}' ./var/mps/log/mas_hb_monit.py.lo* | grep . || awk '/Changing vip address/{print $NF; exit}' ./var/mps/log/masha_vip.py.lo* || echo 'NA'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                admhostid = sp.run("awk '/this_host/{print $(NF-1); exit}' mpsconfig/license/FID*", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                admrealmem = sp.run("awk '/real memory/{print $(NF-1), $NF; exit}' ./var/nslog/dmesg.boot", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                admavailmem = sp.run("awk '/avail memory/{print $(NF-1), $NF; exit}' ./var/nslog/dmesg.boot", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                admplatform = sp.run('''awk '/netscaler.sysid:/ {sysid=$2} END {if (sysid ~ /450000|450001/) print "Citrix Hypervisor"; else if (sysid ~ /450010|450011/) print "ESX"; else if (sysid ~ /450020|450021/ && !/vpx_on_cloud = 0/) print "Hyper-V"; else if (sysid ~ /450070|450071/ && !/vpx_on_cloud = 0/) print "KVM"; else print "Unknown"}' ./shell/sysctl-a.out''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                admvarsize = sp.run("awk '/\/var$/{printf \"%s -> %s | %s | %s | %s\", $1,\"Total: \"$2,\"Used: \"$3, \"Free: \"$4, \"Capacity Used: \"substr($5, 1, length($5)-1)}' ./shell/df-akin.out" + " | awk '{if ($NF > 75){printf \"%s\", substr($0, 1, length($0)-2)\"\033[0;31m\"$NF\"%\033[0m\"}else{printf \"%s\", substr($0, 1, length($0)-2)\"\033\[0;32m\"$NF\"%\033[0m\"}}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                admboottime = sp.run("awk -F} '/kern.boottime/{print $2}' ./shell/sysctl-a.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
            finally:
                print(style.YELLOW + '{:-^87}'.format('NetScaler Console Show Configuration') + "\n" + style.RESET)
                print("Support file location: " + os.popen("pwd").read().strip())
                print("\nConsole Hostname: " + admhostname)
                print("Console IP Address: " + admip)
                print("Console HA Peer IP: " + adm_ha_peer_ip)
                print("Console HA Floating IP: " + (adm_ha_floating_ip if adm_ha_floating_ip else "N/A"))
                if len(adm_ha_peer_version_ready_failover) > 23:
                    if len(adm_ha_peer_version_ready_failover.split("and")[0]) > 10:
                        if "True" in adm_ha_peer_version_ready_failover.split("and")[1]:
                            print("Console HA Peer Firmware: " + adm_ha_peer_version_ready_failover.split("and")[0] + "and" + style.GREEN + adm_ha_peer_version_ready_failover.split("and")[1] + style.RESET)
                    else:
                        if 'True' in adm_ha_peer_version_ready_failover.split("and")[1]:
                            print("Console HA Peer Firmware: NA" + style.GREEN + adm_ha_peer_version_ready_failover.split("and")[1] + "and" + style.RESET)
                        else:
                            print("Console HA Peer Firmware: NA" + style.RED + adm_ha_peer_version_ready_failover.split("and")[1] + "and" + style.RESET)
                print("Console DNS IP: " + adm_nameserver)
                print("Console Firmware: " + admfirmware)
                print("Console HostID: " + admhostid)
                print("Console Hosted Hypervisor: " + admplatform)
                print("Console Boot Time: " + admboottime)
                print("\n" + admcpu)
                print("Real Memory: " + admrealmem + " | " + "Available Memory: " + admavailmem)
                print("var Size: " + admvarsize)
                # Tooltrack
                try:
                    fate_message = "show --adm info"; send_request(version, username, url, fate_message, "Success")
                finally:
                    quit()
        elif "md" in args.adm:
            try:
                managed_devices_file = str(sp.run("find ./ -name managed_device.csv", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip())
                columns_to_display = ['ip_address', 'type', 'hostname', 'model_id', 'license_edition', 'instance_mode', 'upsince', 'host_id', 'is_local_license', 'is_licensed', 'license_grace_time', 'status', 'instance_state']
                def get_max_column_widths(csv_reader, columns):
                    max_widths = {column: len(column) for column in columns}
                    for row in csv_reader:
                        for column in columns:
                            value = row[column]
                            if value == "Instance not reachable":
                                value = "Failed"
                            elif value == "Out of Service":
                                value = "OOS"
                            max_widths[column] = max(max_widths[column], len(value))
                    return max_widths
                with open(managed_devices_file, mode='r') as file:
                    csv_reader = csv.DictReader(file)
                    max_widths = get_max_column_widths(csv_reader, columns_to_display)
                    file.seek(0)
                    csv_reader = csv.DictReader(file)
                    header = [f"{style.YELLOW}{column:<{max_widths[column]}}{style.RESET}" for column in columns_to_display]
                    print('  '.join(header))
                    print('  '.join(['-' * max_widths[column] for column in columns_to_display]))
                    for row in csv_reader:
                        selected_data = []
                        for column in columns_to_display:
                            value = row[column]
                            if value == "t":
                                value = "Yes"
                            elif value == "f":
                                value = "No"
                            elif value == "-1":
                                value = " "
                            if value == "Instance not reachable":
                                value = "Failed"
                            elif value == "Out of Service":
                                value = "OOS"
                            if column == "instance_state":
                                if value == "Up":
                                    value = f"{style.GREEN}{value}{style.RESET}"
                                elif value == "Down" or value == "OOS":
                                    value = f"{style.RED}{value}{style.RESET}"
                            else:
                                if value == "Success":
                                    value = f"{style.GREEN}{value}{style.RESET}"
                                elif value == "Failed":
                                    value = f"{style.RED}{value}{style.RESET}"
                            formatted_value = f"{value:<{max_widths[column]}}"
                            selected_data.append(formatted_value)
                        print('  '.join(selected_data))
            finally:
                # Tooltrack
                try:
                    fate_message = "show --adm md"; send_request(version, username, url, fate_message, "Success")
                finally:
                    quit()
        elif "apps" in args.adm:
            try:
                print(style.YELLOW + '{:-^87}\n'.format('NetScaler Console Applications') + style.RESET)
                applications_file = str(sp.run("find ./ -name application.csv", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip())
                columns_to_display = ['name', 'vServer_Type', 'ns_ip_address', 'application_managed']
                def get_max_column_widths(csv_reader, columns):
                    max_widths = {column: len(column) for column in columns}
                    for row in csv_reader:
                        for column in columns:
                            value = row.get(column, '')
                            max_widths[column] = max(max_widths[column], len(value))
                    return max_widths
                try:
                    with open(applications_file, mode='r') as file:
                        csv_reader = csv.DictReader(file)
                        rows = list(csv_reader)
                        for row in rows:
                            name = row['name']
                            if '_' in name:
                                name, vServer_Type = name.rsplit('_', 1)
                            else:
                                name, vServer_Type = name, ''
                            row['name'] = name
                            row['vServer_Type'] = vServer_Type
                        max_widths = get_max_column_widths(rows, columns_to_display)
                        header = [f"{style.YELLOW}{column:<{max_widths[column]}}{style.RESET}" for column in columns_to_display]
                        print('  '.join(header))
                        print('  '.join(['-' * max_widths[column] for column in columns_to_display]))
                        for row in rows:
                            selected_data = []
                            for column in columns_to_display:
                                value = row[column]
                                if value == "t":
                                    value = f"{style.GREEN}Yes{style.RESET}"
                                elif value == "f":
                                    value = f"{style.RED}No{style.RESET}"
                                formatted_value = f"{value:<{max_widths[column]}}"
                                selected_data.append(formatted_value)
                            print('  '.join(selected_data))
                except Exception as e:
                    print(f"Error reading file: {e}")
            finally:
                # Tooltrack
                try:
                    fate_message = "show --adm apps"
                    send_request(version, username, url, fate_message, "Success")
                finally:
                    quit()
        elif "gz" in args.adm:
            try:
                # Fix permission
                sp.run("fixperms ./", shell=True, stdout=sp.PIPE, stderr=sp.PIPE, check=True)
                # Unzip all gz files under ./var/log
                gunzipresult = sp.run("find ./ -name \"*.gz\" | xargs -I {} gunzip {}", shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
            finally:
                print(style.YELLOW + '{:-^87}\n'.format('NetScaler gz files Extraction') + style.RESET)
                if gunzipresult.returncode == 0:
                    sp.run("fixperms ./", shell=True, stdout=sp.PIPE, stderr=sp.PIPE, check=True)
                    print(style.YELLOW + str(gunzipresult.stderr.decode('utf-8')) + style.RESET)
                    print(style.GREEN + "Extracted all gz files!!!" + style.RESET)
                else:
                    print(style.RED + "No gz files found" + style.RESET)
                try:
                    fate_message = "show --adm gz"
                    send_request(version, username, url, fate_message, "Success")
                finally:
                    quit()
        elif "imall" in args.adm:
            try:
                adm_var_log = str(sp.run("find ./ -type d -name var -exec test -d {}/log \; -print | sed 's|/var$|/var/log|'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip())
                adm_mps_log = str(sp.run("find ./ -type d -name var -exec test -d {}/mps/log \; -print | sed 's|/var$|/var/mps/log|'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip())
                ns_log_timestamp = sp.run("awk 'BEGIN{printf \"%s\\t| %s\\t  | %s\\n\", \"Start_Time\",\"End_Time\",\"File_Name\"}'; for i in $(printf '%s\n' " + adm_var_log + "/ns.lo* | grep -v gz | grep -v tar); do awk 'NR == 2 {printf \"%s %02d %s\\t| \", $1,$2,$3}END{printf \"%s %02d %s | %s\\n\", $1,$2,$3,ARGV[1]}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                mps_config_timestamp = sp.run("""for i in $(find """ + adm_mps_log + """ -name "mps_config.lo*" | xargs -I {} echo {}); do gawk '/^[0-9]{1,2}\\s[A-Za-z]{3}\\s[0-9]{2}\\s[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3}\\s/ {if (start == "") start = sprintf("%02d %s %s %s", $1, $2, $3, $4); last = sprintf("%02d %s %s %s", $1, $2, $3, $4)} END {printf "%s\\t| %s | %s\\n", start, last, FILENAME}' $i; done""", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                mps_event_timestamp = sp.run("""for i in $(find """ + adm_mps_log + """ -name "mps_event.lo*" | xargs -I {} echo {}); do gawk '/^[0-9]{1,2}\\s[A-Za-z]{3}\\s[0-9]{2}\\s[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3}\\s/ {if (start == "") start = sprintf("%02d %s %s %s", $1, $2, $3, $4); last = sprintf("%02d %s %s %s", $1, $2, $3, $4)} END {printf "%s\\t| %s | %s\\n", start, last, FILENAME}' $i; done""", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                mps_inventory_timestamp =  sp.run("""for i in $(find """ + adm_mps_log + """ -name "mps_inventory.lo*" | xargs -I {} echo {}); do gawk '/^[0-9]{1,2}\\s[A-Za-z]{3}\\s[0-9]{2}\\s[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3}\\s/ {if (start == "") start = sprintf("%02d %s %s %s", $1, $2, $3, $4); last = sprintf("%02d %s %s %s", $1, $2, $3, $4)} END {printf "%s\\t| %s | %s\\n", start, last, FILENAME}' $i; done""", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                mps_service_timestamp = sp.run("for i in $(printf '%s\\n' " + adm_mps_log + "/mps_service.lo* | grep -v gz | grep -v tar); do awk 'NR == 2 {printf \"%02d %s %s %s\\t| \", $1,$2,$3,$4}END{printf \"%02d %s %s %s | %s\\n\", $1,$2,$3,$4,ARGV[1]}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
            finally:
                if ns_log_timestamp.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler ns.log timestamp IndexMessages') + style.RESET + ns_log_timestamp.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read ns.log') + style.RESET)
                if mps_config_timestamp.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler mps_config.log timestamp IndexMessages') + style.RESET + mps_config_timestamp.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read mps_config.log') + style.RESET)
                if mps_event_timestamp.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler mps_event.log timestamp IndexMessages') + style.RESET + mps_event_timestamp.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read mps_event.log') + style.RESET)
                if mps_inventory_timestamp.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler mps_inventory.log timestamp IndexMessages') + style.RESET + mps_inventory_timestamp.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read mps_inventory.log') + style.RESET)
                if mps_service_timestamp.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler mps_service.log timestamp IndexMessages') + style.RESET + mps_service_timestamp.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read mps_service.log') + style.RESET)
                try:
                    fate_message = "show --adm imall"
                    send_request(version, username, url, fate_message, "Success")
                finally:
                    quit()
        elif "crash" in args.adm:
            try:
                process_crash = sp.run("find ./ -type d -name 'core' -exec ls -lRht {} \; | awk '!/bound/&&/-rw-/{printf \"[%s-%s/%s --> %s --> %s]\\n\", $6, $7, $8, $NF, $5}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
            finally:
                print(style.YELLOW + '{:-^87}\n'.format('NetScaler Console Process Crash Details') + style.RESET)
                if len(process_crash) > 5:
                    print(process_crash)
                else:
                    print(style.GREEN + "No process crash file found in the NetScaler Console support bundle" + style.RESET)
                #tooltrack
                try:
                    fate_message = "show --adm crash"
                    send_request(version, username, url, fate_message, "Success")
                finally:
                    quit()
        elif "graph" in args.adm:
            try:
                path = "conFetch"
                isExist = os.path.exists(path)
                if not isExist:
                    os.popen("fixperms $PWD").read()
                    os.makedirs(path)
                else:
                    pass
                custom_counter = ""
                admhostname = sp.run("awk '/kern.hostname/{print $NF; exit}' ./shell/sysctl-a.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                collector_bundle_name = sp.run("pwd", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.split("/")[5]
                cpu_mem_raw_data = sp.run("for i in $(ls -lah ./var/mps/log/ | awk '/mps_invent/{print \"./var/mps/log/\"$NF}' | sort -rV); do awk '/Health Check/&&/Usage/{print $2\"-\"$1\",20\"$3\"-\"$4, $NF, $(NF-2)}' $i | sed 's/\\.[0-9][0-9][0-9]//g'; done | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}'| sed 's/-/ /g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                end_time = sp.run("awk '/Health Check/{print $1, $2, $3, $4; exit}' $(for i in $(ls -lah ./var/mps/log/ | awk '/mps_invent/{print \"./var/mps/log/\"$NF}' | sort -V); do echo $i; done | head -n1)", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                start_time = sp.run("awk '/Health Check/{print $1, $2, $3, $4; exit}' $(for i in $(ls -lah ./var/mps/log/ | awk '/mps_invent/{print \"./var/mps/log/\"$NF}' | sort -V); do echo $i; done | tail -n1)", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                start_end = f'{start_time} to {end_time}'
                if len(cpu_mem_raw_data) < 52:
                        cpu_mem_raw_data = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');,['', ]"
                else:
                    pass
                cpu_mem_raw_data = re.sub('.*,\s\].*', '', cpu_mem_raw_data)
                with open(f"{path}/CPU_Mem_Graph.html", "w") as file:
                    file.write('''<html><head> <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script> <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.js"></script> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.css"> <script type="text/javascript">google.charts.load('current',{'packages': ['annotationchart']}); google.charts.setOnLoadCallback(allnic_tot_rx_tx_mbits); function allnic_tot_rx_tx_mbits(){var data=new google.visualization.DataTable(); ''' + cpu_mem_raw_data +
                                ''' var chart=new google.visualization.AnnotationChart(document.getElementById('allnic_tot_rx_tx_mbits')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}</script></head><body> <h1 class="txt-primary">CPU and Mem</h1> <hr> <p class="txt-title">Collector_Bundle_Name: '''+collector_bundle_name+'''<br>Device_Name: '''+admhostname+'''<br>Log_file: All mps_inventory<br>Log_Timestamp: '''+start_end+'''</p><hr> <div style="width: 100%"><p class="txt-primary">CPU and Mem Graph</p><div id="allnic_tot_rx_tx_mbits" style="height:450px"></div></div><div class="footer">Project conFetch</div></body></html>''')
                single_line_out = sp.run("perl -p -e 's/(?<!>)\n//g' conFetch/CPU_Mem_Graph.html > temp_file.html && mv temp_file.html conFetch/CPU_Mem_Graph.html", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                os.popen("fixperms ./conFetch/").read()
                print(style.GREEN + f'Processed CPU_Mem_Graph.html Graph for all newnslogs' + style.RESET)
                try:
                    fate_message = "show --adm graph"; send_request(version, username, url, fate_message, "Success")
                finally:
                    quit()
            except Exception as e:
                print(e)
                print(style.RED + "Unable to plot Graph for NetScaler Console" + style.RESET)
                try:
                    fate_message = "show --adm graph"; send_request(version, username, url, fate_message, "Failed")
                finally:
                    quit()
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        quit()
# End of ADM section

if args.i:
    try:
        logger.info(os.getcwd() + " - show -i")
        # Printing system essential details
        print(style.YELLOW + '{:-^87}'.format('NetScaler Show Configuration') + "\n" + style.RESET)
        adchostname = sp.run("awk '{print $2}' shell/uname-a.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        #adcpartitionName = sp.run("find shell/partitions/ -maxdepth 1 -mindepth 1 | awk -F'/' '{print $NF}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        totalpartition = sp.run('''awk '/add ns partition/{partitions = partitions $4 " | "} END {sub(/ \| $/, "", partitions); print partitions}' shell/ns_running_config.conf''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        partition_count = sp.run('''awk '/add ns partition/{count++} END{print count}' shell/ns_running_config.conf''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        rcnetscaler = sp.run("[ -f nsconfig/rc.netscaler ] && awk '/nsapim/{count++} END{print count+0}' nsconfig/rc.netscaler", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        adcha = sp.run( "sed -n -e \"/exec: show ns version/I,/Done/p\" shell/showcmds.txt | grep Node | awk -F':' '{print $2}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        adcfirmware = sp.run("cat shell/ns_running_config.conf | grep \"#NS\" | cut -c 2-", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        admconnected = sp.run("awk '/add service adm_metric_collector_svc_/{printf \"%s (%s : %s) \", $4, $5, $6}' shell/ns_running_config.conf", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        firmwarehistory = sp.run("awk -F'NetScaler' 'BEGIN{nores=1;}/upgrade from NetScaler/{if ($0 ~ \"upgrade|build\") history=$2; nores=0} END {if (nores) print \"None found recently\"; else print history}' shell/dmesg-a.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        nsinstall = sp.run("awk '/VERSION/||/_TIME/{$1=\"\"; printf \"%s -->\", $0}' var/nsinstall/installns_state | sed -E 's/^\s|[0-9]{9,15}.|-->$//g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        platformserial = sp.run("sed -n '/^exec: show ns hardware/,/Done/p' shell/showcmds.txt | awk '/Serial/{print $NF}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        platformmodel = sp.run("sed -n '/^exec: show ns hardware/,/Done/p' shell/showcmds.txt | awk '/Platform/{print $1=\"\"; print}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        licmodel_licfile = sp.run("awk '/Users/{print}' var/log/license.log | awk -F: '{print $1}' | awk '{printf \"%s | \", $NF}' | sed 's/..$//'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        licmodel_cloudlic = sp.run("awk '/Cloud Subscription License/{if ($0 ~ YES) print \"Cloud Subscription License\"}' shell/showcmds.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        if len(licmodel_cloudlic.stdout.strip()) > 1:
            licmodel = licmodel_cloudlic.stdout.strip()
        else:
            licmodel = licmodel_licfile.stdout.strip()
        hwplatform = sp.run("egrep \"netscaler.descr\" shell/sysctl-a.out | awk -F':' '{print $2}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        vmplatform_sdx = sp.run('''awk '/vpx_on_sdx/||/netscaler.sdxvpx/{if ($0 ~ 1) print "VPX on SDX"}' shell/sysctl-a.out''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        vmplatform_cloud = sp.run('''awk '/vpx_on_cloud/{if ($0 ~ 1) print "VPX on AWS"; else if ($0 ~ 3) print "VPX on Azure"; else if ($0 ~ 4) print "VPX on GCP"}' shell/sysctl-a.out''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        vmplatform_esx = sp.run('''awk '/netscaler.sysid/ {sysid=$2} END {if (sysid ~ /450000|450001/) print "Citrix Hypervisor"; else if (sysid ~ /450010|450011/) print "ESX"; else if (sysid ~ /450020|450021/ && !/vpx_on_cloud = 0/) print "Hyper-V"; else if (sysid ~ /450070|450071/ && !/vpx_on_cloud = 0/) print "KVM"; else print "Unknown"}' shell/sysctl-a.out''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        if len(vmplatform_sdx.stdout.strip()) > 1:
            vmplatform = vmplatform_sdx.stdout.strip()
        elif len(vmplatform_cloud.stdout.strip()) > 1:
            vmplatform = vmplatform_cloud.stdout.strip()
        else:
            vmplatform = vmplatform_esx.stdout.strip()
        modelid = sp.run("awk '/Model Number ID:/{print $NF}' shell/showcmds.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        licensetype = sp.run("awk '/License Type/{$1=$2=\"\"; print}' shell/showcmds.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        licensemode = sp.run("awk '/Licensing mode/{$1=$2=\"\"; print}' shell/showcmds.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        hostid = sp.run("awk '/HostID/&&/Server/{print $NF}' var/log/license.log | tail -n1", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        if len(hostid.stdout) == 0:
            hostid = sp.run("awk '/Host Id:/{print $NF}' shell/showcmds.txt | tail -n1", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        nsip = sp.run("sed -n '/ns config/,/Done/p' shell/showcmds.txt | grep \"NetScaler IP\" | egrep -o \"[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\" | grep -v 255", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        nsipsubnet = sp.run("sed -n '/ns config/,/Done/p' shell/showcmds.txt | grep \"NetScaler IP\" | egrep -o \"[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\" | grep 255", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        nsfeatures = sp.run("awk '$0 ~ /^enable/&&/enable ns feature/{$1=$2=$3=\"\";print $0}' shell/ns_running_config.conf", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        if os.path.isfile("conFetch/nsconmsg/newnslog_setime.txt"):
            newnslogsetime = sp.run("cat conFetch/nsconmsg/newnslog_setime.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        else:
            all_newnslog_startend_times = str(sp.run('''for i in $(find ./ -type d -name "newnslog*"); do nsconmsg -K $i -d setime | awk '!/Display/&&/ time/'; done''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout)
            if len(all_newnslog_startend_times) == 0:
                newnslogsetime = (style.RED + 'No newnslog available in the collector bundle' + style.RESET)
            else:
                newnslogsetime = find_min_max_dates(all_newnslog_startend_times)
            #newnslogsetime = sp.run("echo $(nsconmsg -K $(find ./ -type d -name \"newnslog.*\" | sort |  sed 's/ .\\//\\n.\\//g' | awk -F/ '{print \"var/nslog/\"$NF}' | sed -n '1p') -d setime | awk '/start/&&!/Displaying/{$1=$2=\"\"; printf }' | awk '{$1=$1=\"\"}1'; printf \" --> \"; nsconmsg -K var/nslog/newnslog -d setime | awk '/end/&&!/Displaying/{$1=$2=\"\"; print}' | awk '{$1=$1=\"\"}1')", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        nsmode = sp.run("awk '/ns mode/{$1=$2=$3=\"\";print $0}' nsconfig/ns.conf", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        nsboottime = sp.run("egrep \"nsstart\" var/nslog/ns.log | tail -1 | awk '{$1=$NF=$(NF-1)=\"\"; print}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        collectorpacktime = sp.run("cat shell/date.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        deviceuptime = sp.run("sed 's/^.*up //' shell/uptime.out | sed 's/,...user.*//'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        systemtimezone = sp.run("""awk '/Timezone:/&&/GMT/{print $2}' shell/showcmds.txt | awk '{print substr($1,1,9)}' | awk -F'GMT' '{printf "GMT " $2" "}'; awk '/Timezone:/&&/GMT/{print $2}' shell/showcmds.txt | awk '{print substr($1,11)}' | awk -F- '{print "["$1"]" " - "$2}' | awk 'BEGIN { found = 0 } { output = $0; found = 1 } END { if (found) print output; else print "GMT 00:00 [UTC] - Coordinated Universal Time" }'""", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        cpuinfo = sp.run("awk '/hw.model/{$1=\"\"; print}' shell/sysctl-a.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        loadaverage = sp.run("awk '/load average/{printf \"%s %s %s\", \"1 min: \"$6, \"5 min: \"$7, \"15 min: \"$8}' shell/top-b.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        mgmtcpu = sp.run("awk '!/100% idle/{printf \"Management: %s User: %s | Nice: %s | System: %s | Interrupt: %s | Idle: %s\\n\", $1, $2, $4, $6, $8, $(NF-1)}' shell/mgmtcpupercent.txt | awk '{if($NF>75) print $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, \"\\033[32m\"$16\"\\033[0m\"; else print $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, \"\\033[31m\"$16\"\\033[0m\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        memoryinfo = sp.run("awk '(/hw.usermem/ && ORS=\" ,\") || (/hw.realmem/ && ORS=RS)' shell/sysctl-a.out | head -n1 | awk '{printf \"%s | %s\", \"Total Memory: \"$4/1048576, \"Available Memory: \"$2/1048576}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        varsize = sp.run("awk '/\/var$/{printf \"%s -> %s | %s | %s | %s\", $1,\"Total: \"$2,\"Used: \"$3, \"Free: \"$4, \"Capacity Used: \"substr($5, 1, length($5)-1)}' shell/df-akin.out | awk '{if ($NF > 75){printf \"%s\", substr($0, 1, length($0)-2)\"\033[0;31m\"$NF\"%\033[0m\"}else{printf \"%s\", substr($0, 1, length($0)-2)\"\033\[0;32m\"$NF\"%\033[0m\"}}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        sslcards = sp.run("awk '/SSL cards UP/{printf \"%s%s - \",\"[UP: \" $NF,\"]\"}/SSL cards present/{printf \"%s%s\\n\", \"[Present: \"$NF,\"]\";exit}' shell/statcmds.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        nsppe = sp.run("awk '/NSPPE/{c++}END{print c}' shell/nsp.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        nstimes = sp.run("sed -n -e \"/exec: show ns version/I,/Done/ p\" shell/showcmds.txt | grep Time | awk '{$1=$1};1'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        if len(memoryinfo.stdout) > 0:
            memoryinfototal = float(memoryinfo.stdout.split()[2])
            memoryinfoavail = float(memoryinfo.stdout.split()[6])
            memfreepercent = (memoryinfoavail / memoryinfototal)*100
            memfreepercent = round(memfreepercent, 2)
        else:
            pass
        adcfirmwareRTM = sp.run("curl -s 'https://www.citrix.com/downloads/citrix-adc/' | egrep -C2 \"<a href=\\\"\/downloads\/citrix-adc.*\" | awk '/citrix-adc|\/p/{print}' | paste - - | sed -E 's/<\/.|<a href=|\\\"|NEW/ /g' | awk -F'>' '{printf \"%s|%s\\n\", $3, $2}' | awk '{$1=$1};1' | sed -E 's-\| \|- \|-g' | column -t -s'|' | sort -k4n -k2M -k3n", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip().replace('\n\n', '\n')
        releasedate = ""
        for line in adcfirmwareRTM.splitlines():
            if str(adcfirmware.stdout.strip().split()[-1]) in line:
                date_match = re.search(r"(\w{3} \d{1,2}, \d{4})", line)
                if date_match:
                    release_date = datetime.strptime(date_match.group(1), "%b %d, %Y")
                    age_days = (datetime.now() - release_date).days
                    years, months, days = calculate_age(release_date)
                    releasedate = f" and released on {release_date.strftime('%b %d, %Y')} ({age_days} days ago or {years} year{'' if years == 1 else 's'}, {months} month{'' if months == 1 else 's'} {days} day{'' if days == 1 else 's'} old)"
                else:
                    releasedate = ""
                break
            else:
                pass
        virtual_physical = sp.run('''awk '/VPXEnvironment/{if ($0 ~ /VPX/) {print "VPX"; exit}}' shell/showcmds.txt''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        total_core = sp.run('''awk '/System Detected/{print $(NF-1);exit}' var/nslog/dmesg.boot''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        required_mem = sp.run('''awk '/System Detected/{print $(NF-1)*4000;exit}' var/nslog/dmesg.boot''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        configured_mem = sp.run('''awk '/hw.realmem/{print $2/1048576}' shell/sysctl-a.out''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        major_version = sp.run("awk '/Build/{print $1}' shell/ns_running_config.conf | awk -FS '{print $2}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        try:
            mem_decision_output = int(required_mem) < int(configured_mem)
        finally:
            if mem_decision_output is False and not re.search("MPX", platformmodel.stdout):
                configured_mem_val = int(configured_mem) / 1000
                required_mem_val = int(required_mem) / 1000
                print(style.YELLOW + f"Warning: For optimal performance, please allocate {required_mem_val} GB RAM for {total_core} vCPU vs currently configured {configured_mem_val} GB (Refer VPX Datasheet)\n" + style.RESET)
            else:
                pass
            if float(major_version) >= 13.1:
                classic_policies = sp.run("awk '/ns_true/{count++} END{if (count+0 > 0) print \"Found Classic Policies\"}' shell/ns_running_config.conf", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                if len(classic_policies) > 1:
                    print(style.YELLOW + f"Warning: {classic_policies}\n" + style.RESET)
                else:
                    pass
            else:
                pass
            if float(major_version) < 13.1:
                print(style.RED + f"Error: NetScaler firmware is EOL\n" + style.RESET)
    except IOError as io:
        print(io)
    finally:
        print("Support file location: " + os.popen("pwd").read().strip())
        print("")
        print(nstimes.stdout.strip())
        print("Collector pack generated @ " + collectorpacktime.stdout.strip())
        print("System TimeZone: " + systemtimezone.stdout.strip())
        print("Newnslog Overall Start_End Time: " + newnslogsetime)
        print("")
        print("NetScaler Hostname: " + adchostname.stdout.strip())
        print("NetScaler HA State: " + adcha.stdout.strip())
        print(f"ADM Connected: {admconnected if admconnected else 'No'}")
        print("NetScaler Firmware version: " + adcfirmware.stdout.strip() + releasedate)
        print("Firmware history: " + firmwarehistory.stdout.strip())
        print("Last Upgrade Stats: " + nsinstall.stdout.strip())
        # print(f"Partition Name: {adcpartitionName if adcpartitionName else 'default'}")
        print(f"Admin Partition's: {totalpartition if totalpartition else 'default'}")
        print(f"Number of admin partition's: {partition_count if partition_count else '0'}")
        if rcnetscaler.isdigit() and int(rcnetscaler) > 0:
            print("Number of nsapimgr commands in nsconfig/rc.netscaler: " + rcnetscaler)
        print("")
        print("Platform Serial: " + platformserial.stdout.strip())
        print("Platform Model: " + platformmodel.stdout.strip())
        print("HW Platform: " + hwplatform.stdout.strip())
        print("VM Platform: " + vmplatform)
        print("Model ID: " + modelid.stdout.strip())
        print("")
        print("License Type: " + licensetype.stdout.strip())
        print("Licensing Mode: " + licensemode.stdout.strip())
        print("License Model: " + licmodel)
        print("HostID: " + hostid.stdout.strip())
        print("")
        print("NSIP Address: " + nsip.stdout.strip() + " | " + nsipsubnet.stdout.strip())
        print("NS Enabled Feature: " + nsfeatures.stdout.strip())
        print("NS Enabled Mode: " + nsmode.stdout.strip())
        print("NS Last Warm Boot Time: " + nsboottime.stdout.strip())
        print("Device uptime (Cold boot): " + deviceuptime.stdout.strip())
        print("")
        print("CPU Info: " + cpuinfo.stdout.strip())
        print("Load Average: " + loadaverage.stdout.strip())
        print(mgmtcpu.stdout.strip())
        try:
            if memfreepercent > 40:
                print("Memory Info: " + memoryinfo.stdout.strip() + " | Free Percent: " + style.GREEN + str(memfreepercent) + "%" + style.RESET)
            else:
                print("Memory Info: " + memoryinfo.stdout.strip() + " | Free Percent: " + style.RED + str(memfreepercent) + "%" + style.RESET)
        except NameError:
            pass
        print("var Size: " + varsize.stdout.strip())
        print("SSL Cards: " + sslcards.stdout.strip())
        print("NSPPE Count: " + nsppe.stdout.strip() + "\n")
        # Tooltrack
        try:
            fate_message = "show -i"; send_request(version, username, url, fate_message, "Success")
        finally:
            quit()
elif args.P:
    try:
        partition_basic = sp.run("awk '/add ns partition/{printf \"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\", $6,$8/1024,$10,$12,$4,$14 ~ /:/ ? $14 : \"Not-Configured\"}' shell/ns_running_config.conf", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        partition_basic_data = [line.split() for line in partition_basic.split('\n')]
        partition_vlan = sp.run("awk '/bind ns partition/{printf \"%s\\t%s\\n\", $4, $NF}' shell/ns_running_config.conf", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        partition_vlan_data = [line.split() for line in partition_vlan.split('\n')]
    finally:
        print(style.YELLOW + '{:-^87}'.format('NetScaler Admin Partition Details') + "\n" + style.RESET)
        if len(partition_basic_data) >= 2:
            mapping = {row[4]: row for row in partition_basic_data}
            mapped_result = []
            added_partitions = set()
            for vlan_row in partition_vlan_data:
                partition_name = vlan_row[0] 
                vlan_id = vlan_row[1]
                if partition_name in mapping:
                    mapped_result.append([vlan_id] + mapping[partition_name])
                    added_partitions.add(partition_name)
            for partition_row in partition_basic_data:
                partition_name = partition_row[4]
                if partition_name not in added_partitions:
                    mapped_result.append([" "] + partition_row)
            header = ["vlan | ", "partitionid | ", "maxBandwidth Mbps | ", "maxConn | ", "maxMemLimit MB | ", "partitionName | ", "partitionMAC |"]
            column_widths = [len(header[i]) for i in range(len(header))]
            for row in mapped_result:
                for i in range(len(row)):
                    column_widths[i] = max(column_widths[i], len(str(row[i])))
            formatted_header = [header[i].ljust(column_widths[i]) for i in range(len(header))]
            print(' '.join(formatted_header))
            separator = '-' * (sum(column_widths) + len(column_widths) - 1)
            print(separator)
            for row in mapped_result:
                formatted_row = [str(row[i]).ljust(column_widths[i]) for i in range(len(row))]
                print(' '.join(formatted_row))
            # Tooltrack
            try:
                fate_message = "show -P"; send_request(version, username, url, fate_message, "Success")
            finally:
                quit()
        else:
            print(style.RED + "No admin partition details to display" + style.RESET)
            # Tooltrack
            try:
                fate_message = "show -P"; send_request(version, username, url, fate_message, "Failed")
            finally:
                quit()

elif args.u:
    try:
        adcfirmwareRTM = sp.run("curl -s 'https://www.citrix.com/downloads/citrix-adc/' | egrep -C2 \"<a href=\\\"\/downloads\/citrix-adc.*\" | awk '/citrix-adc|\/p/{print}' | paste - - | sed -E 's/<\/.|<a href=|\\\"|NEW/ /g' | awk -F'>' '{printf \"%s|%s\\n\", $3, $2}' | awk '{$1=$1};1' | sed -E 's-\| \|- \|-g' | column -t -s'|' | sort -k4n -k2M -k3n", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip().replace('\n\n', '\n')
        fullversion = sp.run('''awk '/#NS/&&/Build/' shell/ns_running_config.conf''',  shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip().split()
        current_major_version = fullversion[0][3:]
        current_minor_version = fullversion[2]
        build_pattern = re.compile(r"([A-Za-z]+\s+\d{1,2},\s+\d{4})\s+Citrix ADC Release .* (13\.1|14\.1) Build (\d+\.\d+)(?:/\d+\.\d+)?")
        builds_with_dates = build_pattern.findall(adcfirmwareRTM)
        current_minor_version_float = float(current_minor_version)
        new_builds_with_dates = [
            (date, major, float(minor)) 
            for date, major, minor in builds_with_dates 
            if major == current_major_version and float(minor) > current_minor_version_float
        ]
    except Exception as e:
        print(f"An error occurred: {e}")
        try:
            fate_message = "show -u"; send_request(version, username, url, fate_message, "Failed")
        finally:
            quit()
    finally:
        print(style.YELLOW + '{:-^87}'.format('NetScaler Build Update Details') + style.RESET)
        print(style.YELLOW + f"Current Firmware Version: " + style.RESET + f"{current_major_version} Build {current_minor_version}" + "\n")
        print(style.YELLOW + f"Number of new firmware versions greater than " + style.RESET + f"{current_major_version}_{current_minor_version}: {len(new_builds_with_dates)} builds\n")
        if new_builds_with_dates:
            print(style.YELLOW + "New firmware builds:" + style.RESET)
            for date, major, minor in new_builds_with_dates:
                print(f"{major}_{minor:.2f} (Released on {date})")
            try:
                fate_message = "show -u"; send_request(version, username, url, fate_message, "Success")
            finally:
                quit()
        else:
            print(style.GREEN + "No new firmware builds found." + style.RESET)
            try:
                fate_message = "show -u"; send_request(version, username, url, fate_message, "Success")
            finally:
                quit()

elif args.r:
    try:
        nsrestart = sp.run("awk '/nsrestart.sh/{print $3, $4, $5, $6, $7}' var/nslog/ns.log", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
        if not len(nsrestart) > 23:
            nsrestart = style.GREEN + "No nsrestart detected" + style.RESET
    finally:
        print(style.YELLOW + '{:-^87}'.format('NetScaler Restart Timestamp') + style.RESET)
        print(nsrestart + "\n")
        # Tooltrack
        try:
            fate_message = "show -r"; send_request(version, username, url, fate_message, "Success")
        finally:
            quit()
elif args.pt:
    box_time = str(sp.run("awk -F'GMT' '/Timezone:/&&/GMT/{print substr($2,1,6)}' shell/showcmds.txt | awk 'BEGIN { found = 0 } { output = $0; found = 1 } END { if (found) print output; else print \"00:00\" }'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip())
    box_time_mins = (int(re.match(r"([-+]?)(\d+):(\d+)", box_time).group(2)) * 60) + int(re.match(r"([-+]?)(\d+):(\d+)", box_time).group(3)); box_time_mins *= -1 if re.match(r"([-+]?)(\d+):(\d+)", box_time).group(1) == "-" else 1
    try:
        user_time = datetime.strptime(args.pt[0], "%b %d %H:%M:%S")
        final_timestamp_nslog = []
        final_timestamp_messageslog_line = []
        final_timestamp_newnslog_line = []
        final_timestamp_newnslog_local_line = []
        nslog = sp.run("for i in $(printf '%s\n' var/log/ns.lo* | grep -v gz | grep -v tar); do awk 'NR == 2 {printf \"%s %02d %s | \", $1,$2,$3}END{printf \"%s %02d %s | %s\\n\",  $1,$2,$3,substr(ARGV[1],9)}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        messageslog = sp.run("for i in $(printf '%s\n' var/log/message* | grep -v gz | grep -v tar); do awk 'NR == 2 {printf \"%s %02d %s | \", $1,$2,$3}END{printf \"%s %02d %s | %s\\n\",  $1,$2,$3,substr(ARGV[1],9)}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        newnsloglog = sp.run("for i in $(printf '%s\n' var/nslog/newnslo* | grep -v gz | grep -v tar); do nsconmsg -K $i -d setime | awk '!/Displaying|NetScaler|size|duration/{$1=$2=\"\"; printf \"%s\\t|\", $0}END{printf \"\\n\"}'; echo $i; done | sed 'N;s/\\n/ /' | awk '{$1=$1=\"\"}1' | sed 's/^ //' | sed -r '/^\\s*$/d' | awk '{printf  \"%s %02s %s %s %s %02s %s %s %s\\n\", $2,$3,$4,$6,$8,$9,$10,$12,$13}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        newnslog_output = []
        time_format = "%b %d %H:%M:%S"
        for line in newnsloglog.splitlines():
            parts = line.split(" | ")
            start_time = datetime.strptime(parts[0], time_format)
            end_time = datetime.strptime(parts[1], time_format)
            start_time += timedelta(minutes=int(box_time_mins))
            end_time += timedelta(minutes=int(box_time_mins))
            updated_line = f"{parts[0]} | {parts[1]} | {parts[2]} | {start_time.strftime(time_format)} | {end_time.strftime(time_format)}"
            newnslog_output.append(updated_line)
        # ns.log checks
        nslog_line = nslog.strip().split('\n')
        for nslog in nslog_line:
            start = datetime.strptime(nslog.split(" | ")[0], "%b %d %H:%M:%S")
            end = datetime.strptime(nslog.split(" | ")[1], "%b %d %H:%M:%S")
            logname = nslog.split(" | ")[2]
            if start <= user_time <= end:
                final_timestamp_nslog.append(str(nslog.split(" | ")[0]) + " <-- " + style.GREEN + str(logname) + style.RESET + " --> " + str(nslog.split(" | ")[1]) + style.YELLOW + " (System Timezone)\n" + style.RESET)
        # messages check
        messageslog_line = messageslog.strip().split('\n')
        for message in messageslog_line:
            start = datetime.strptime(message.split(" | ")[0], "%b %d %H:%M:%S")
            end = datetime.strptime(message.split(" | ")[1], "%b %d %H:%M:%S")
            logname = message.split(" | ")[2]
            if start <= user_time <= end:
                final_timestamp_messageslog_line.append(str(message.split(" | ")[0]) + " <-- " + style.GREEN + str(logname) + style.RESET + " --> " + str(message.split(" | ")[1]) + style.YELLOW + " (System Timezone)\n" + style.RESET)
        # newnslog check
        newnslog_line = newnsloglog.strip().split('\n')
        for newnslog in newnslog_line:
            start = datetime.strptime(newnslog.split(" | ")[0].strip(), "%b %d %H:%M:%S")
            end = datetime.strptime(newnslog.split(" | ")[1].strip(), "%b %d %H:%M:%S")
            logname = newnslog.split(" | ")[2]
            if start <= user_time <= end:
                final_timestamp_newnslog_line.append(str(newnslog.split(" | ")[0]) + " <-- " + style.GREEN + str(logname) + style.RESET + " --> " + str(newnslog.split(" | ")[1]) + style.YELLOW + " (GMT Timezone)\n" + style.RESET)
        # newnslog check in local timezone
        for newnslog_local in newnslog_output:
            start = datetime.strptime(newnslog_local.split(" | ")[3].strip(), "%b %d %H:%M:%S")
            end = datetime.strptime(newnslog_local.split(" | ")[4].strip(), "%b %d %H:%M:%S")
            logname = newnslog_local.split(" | ")[2]
            if start <= user_time <= end:
                final_timestamp_newnslog_local_line.append(str(newnslog_local.split(" | ")[3]) + " <-- " + style.GREEN + str(logname) + style.RESET + " --> " + str(newnslog_local.split(" | ")[4]) + style.YELLOW + " (System Timezone)\n" + style.RESET)
    except ValueError as e:
        print(style.RED + "Date time format error occured" + style.RESET)
        try:
            fate_message = "show -pt"; send_request(version, username, url, fate_message, "Invalid")
        finally:
            pass
        raise
    except NameError as e:
        print(style.RED + "Date time format error occured" + style.RESET)
        try:
            fate_message = "show -pt"; send_request(version, username, url, fate_message, "Invalid")
        finally:
            pass
        raise
    finally:
        try:
            fate_message = "show -pt"; send_request(version, username, url, fate_message, "Success")
        finally:
            pass
        print(style.YELLOW + '{:-^87}'.format('NetScaler Problem Timestamp and Files') + "\n" + style.RESET)
        if len(final_timestamp_nslog) >= 1:
            print(''.join(str(x) for x in final_timestamp_nslog))
        else:
            print(style.RED + "Unable to find timestamp in any of ns.log\n" + style.RESET)
        if len(final_timestamp_messageslog_line) >= 1:
            print(''.join(str(x) for x in final_timestamp_messageslog_line))
        else:
            print(style.RED + "Unable to find timestamp in any of messages\n" + style.RESET)
        if len(final_timestamp_newnslog_line) >= 1:
            print(''.join(str(x) for x in final_timestamp_newnslog_line))
        else:
            print(style.RED + "Unable to find timestamp in any of newnslog (GMT Timezone)\n" + style.RESET)
        if len(final_timestamp_newnslog_local_line) >= 1:
            print(''.join(str(x) for x in final_timestamp_newnslog_local_line))
            quit()
        else:
            print(style.RED + "Unable to find timestamp in any of newnslog (System Timezone)\n" + style.RESET)
            quit()
elif args.n:
    try:
        logger.info(os.getcwd() + " - show -n")
        # Prining Network related information on ADC
        print(style.YELLOW + '{:-^87}'.format('NetScaler Network Information') + style.RESET+"\n")
        adcnetinfo = sp.run("awk '/exec: show ns ip$/{flag=1;next}/Done/{flag=0}flag' shell/showcmds.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        adcroute = sp.run("awk '/exec: show route$/{flag=1;next}/Done/{flag=0}flag' shell/showcmds.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        adcarp = sp.run("awk '/exec: show arp$/{flag=1;next}/Done/{flag=0}flag' shell/showcmds.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
    finally:
        if adcnetinfo.returncode == 0:
            print(style.YELLOW + '{:-^87}\n'.format('Network Interface') + style.RESET + adcnetinfo.stdout)
        else:
            print(style.RED + '{:-^87}\n'.format('Unable to read Network Interface') + style.RESET)
        if adcroute.returncode == 0:
            print(style.YELLOW + '{:-^87}\n'.format('v4 Routes') + style.RESET + adcroute.stdout)
        else:
            print(style.RED + '{:-^87}\n'.format('Unable to read v4 Routes') + style.RESET)
        if adcarp.returncode == 0:
            print(style.YELLOW + '{:-^87}\n'.format('ARP Table') + style.RESET + adcarp.stdout)
        else:
            print(style.RED + '{:-^87}\n'.format('Unable to read ARP Table') + style.RESET)
        try:
            fate_message = "show -n"; send_request(version, username, url, fate_message, "Success")
        finally:
            quit()
elif args.p:
    try:
        logger.info(os.getcwd() + " - show -p")
        vcpu = sp.run("awk '/System Detected/{print $(NF-1), $NF;exit}' var/nslog/dmesg.boot", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        nsppenum = sp.run("awk '/NSPPE/{print}' shell/nsp.out | wc -l | sed \"s/^[ \t]*//\"", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        nsppepid = sp.run("awk '/NSPPE/{print}' shell/nsp.out | sed \"s/^[ \t]*//\"", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        core = sp.run("awk '/NSPPE-/&&!/bound|log/{printf \"[%s-%s/%s --> %s --> %s]\\n\",  $6, $7, $8, $NF, $5}' shell/ls_lRtrp_var.out | sed \"s/^[ \t]*//\"", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        processcore = sp.run("awk '/bgpd-[0-9]|httpd-[0-9]|iked-[0-9]|imi-[0-9]|imish-[0-9]|iprep-[0-9]|iprep_tool-[0-9]|isisd-[0-9]|metricscollector-[0-9]|nsaaad-[0-9]|nscopo-[0-9]|nskrb_debug-[0-9]|nsm-[0-9]|ospf6d-[0-9]|ospfd-[0-9]|ripd-[0-9]|ripngd-[0-9]|snmpd-[0-9]|nsaggregatord-[0-9]|nscfsyncd-[0-9]|nscollect-[0-9]|nsconfigd-[0-9]|nsconmsg-[0-9]|nslped-[0-9]|nsnetsvc-[0-9]|nsnewstat-[0-9]|nssetup-[0-9]|nstraceaggregator-[0-9]|syshealthd-[0-9]|pitboss-[0-9]|sshd-[0-9]/&&/-rw-------/{printf \"[%s-%s/%s --> %s --> %s]\\n\",  $6, $7, $8, $NF, $5}' shell/ls_lRtrp.out | sed \"s/^[ \t]*//\"", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
    finally:
        print(style.YELLOW + '{:-^87}'.format('NetScaler Process Information'))
        print(style.RESET)
        print("Number of vCPU: " + vcpu.stdout.strip())
        print("NSPPE Count: " + nsppenum.stdout + "\n" + style.GREEN + "Current Running NSPPE:\n" + style.RESET + nsppepid.stdout)
        if len(core.stdout) > 10:
            print(style.LIGHTRED + "Core files: " + "\n" + style.RESET + core.stdout.strip())
            print("")
        if len(processcore.stdout) > 10:
            print(style.LIGHTRED + "Process Core files: " + "\n" + style.RESET + processcore.stdout.strip())
            print("")
        print("")
    try:
        fate_message = "show -p"; send_request(version, username, url, fate_message, "Success")
    finally:
        quit()
elif args.c:
    try:
        newnslog_counter = ''
        if os.path.isfile("conFetch/nsconmsg/nsconmsg_counters.txt"):
            with open("conFetch/nsconmsg/nsconmsg_counters.txt", "r") as nsconmsg_counter:
                for i in nsconmsg_counter.readlines():
                    if str(args.c) in i:
                        newnslog_counter += i
        else:
            newnslog_counter = os.popen("nsconmsg -K var/nslog/newnslog -d current | awk '!/reltime|Index/{print $6}' | sort | uniq -c | egrep '([a-z].*[_]).*' | grep -i "+args.c+" | column").read().strip()
    finally:
        print(style.YELLOW + '{:-^87}'.format('Usable newnslog counters') + style.RESET)
        if len(newnslog_counter) > 10:
            print(newnslog_counter)
            try:
                fate_message = "show -c"; send_request(version, username, url, fate_message, "Success")
            finally:
                pass
        else:
            print(style.RED + "Unable to find any counter name with the keyword " + args.c + style.RESET)
            try:
                fate_message = "show -c"; send_request(version, username, url, fate_message, "Failed")
            finally:
                pass
        quit()

elif args.E:
    try:
        print(style.YELLOW +
              '{:-^87}'.format('Errors and Matched KB Articles') + style.RESET+"\n")
        print(os.popen("for i in $(ls -lah var/log/ | awk '/ns.lo*/{print $NF}'); do awk 'BEGIN{c=0}/\"ERROR: Operation not permitted - no FIPS card present in the system\"/{c++}END {if(c > 0){printf \"%s\\t%s\\t%s\\t%s\\n\", ARGV[1], c, \"ERROR: Operation not permitted - no FIPS card present in the system\", \"https://support.citrix.com/article/CTX330685\"}}' var/log/$i; done").read().strip())
        print("\n")
    finally:
        try:
            fate_message = "show -E"; send_request(version, username, url, fate_message, "Success")
        finally:
            quit()
elif args.fw:
    try:
        logger.info(os.getcwd() + " - show -fu")
        adcfirmwareRTM = sp.run("curl -s 'https://www.citrix.com/downloads/citrix-adc/' | egrep -C2 \"<a href=\\\"\/downloads\/citrix-adc.*\" | awk '/citrix-adc|\/p/{print}' | paste - - | sed -E 's/<\/.|<a href=|\\\"|NEW/ /g' | awk -F'>' '{printf \"%s|%s\\n\", $3, $2}' | awk '{$1=$1};1' | sed -E 's-\| \|- \|-g' | column -t -s'|' | sort -k4n -k2M -k3n", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip().replace('\n\n', '\n')
        admadcfirmwareRTM = sp.run("curl -s 'https://www.citrix.com/downloads/citrix-application-management/' | egrep -C2 \"<a href=\\\"\/downloads\/citrix-application-management.*\" | awk '/citrix-application-management|\/p/{print}' | paste - - | sed -E 's/<\/.|<a href=|\\\"|NEW/ /g' | awk -F'>' '{printf \"%s|%s\\n\", $3, $2}' | awk '{$1=$1};1' | sed -E 's-\| \|- \|-g' | column -t -s'|' | sort -k4n -k2M -k3n", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip().replace('\n\n', '\n')
    finally:
        # NetScaler Release
        print(style.YELLOW + '{:-^87}'.format('NetScaler Released RTM Code Version and Date') + style.RESET+"\n")
        print(style.YELLOW + '{:-^87}'.format('NetScaler Release Feature Phase Code Details') + style.RESET+"\n")
        for adcrelease in adcfirmwareRTM.splitlines():
            if "ADC Release" in adcrelease and "Feature Phase" in adcrelease:
                print(style.LIGHTGREEN + adcrelease + style.RESET)
        print("\n")
        print(style.YELLOW +'{:-^87}'.format('NetScaler Release Maintenance Phase Code Details') + style.RESET+"\n")
        for adcrelease in adcfirmwareRTM.splitlines():
            if "ADC Release" in adcrelease and "Maintenance Phase" in adcrelease:
                print(style.LIGHTRED + adcrelease + style.RESET)
        print("\n")
        # ADM Release
        print(style.YELLOW + '{:-^87}'.format('ADM Released RTM Code Version and Date') + style.RESET+"\n")
        print(style.YELLOW + '{:-^87}'.format('ADM Release Feature Phase Code Details') + style.RESET+"\n")
        for admrelease in admadcfirmwareRTM.splitlines():
            if "ADM Release" in admrelease and "Feature Phase" in admrelease:
                print(style.LIGHTGREEN + admrelease + style.RESET)
        print("\n")
        print(style.YELLOW + '{:-^87}'.format('ADM Release Maintenance Phase Code Details') + style.RESET+"\n")
        for admrelease in admadcfirmwareRTM.splitlines():
            if "ADM Release" in admrelease and "Maintenance Phase" in admrelease:
                print(style.LIGHTRED + admrelease + style.RESET)
        print("\n")
        # SDX Release
        print(style.YELLOW + '{:-^87}'.format('SDX Released RTM Code Version and Date') + style.RESET+"\n")
        print(style.YELLOW + '{:-^87}'.format('SDX Bundle Feature Phase Code Details') + style.RESET+"\n")
        for sdxrelease in adcfirmwareRTM.splitlines():
            if "SDX Bundle" in sdxrelease and "Feature Phase" in sdxrelease:
                print(style.LIGHTGREEN + sdxrelease + style.RESET)
        print("\n")
        print(style.YELLOW + '{:-^87}'.format('SDX Bundle Maintenance Phase Code Details') + style.RESET+"\n")
        for sdxrelease in adcfirmwareRTM.splitlines():
            if "SDX Bundle" in sdxrelease and "Maintenance Phase" in sdxrelease:
                print(style.LIGHTRED + sdxrelease + style.RESET)
        try:
            fate_message = "show -fw"; send_request(version, username, url, fate_message, "Success")
        finally:
            quit()
elif args.gz:
    try:
        logger.info(os.getcwd() + " - show -gz")
        # Fix permission
        sp.run("fixperms ./", shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
        # Unzip all gz files under ./var/log
        gunzipresult = sp.run("gunzip -v var/log/*.gz", shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
        # Unzip all gz files under ./var/nslog
        gunzipnewnsresult = sp.run("for i in var/nslog/new*.tar.gz; do tar -xvf \"$i\" -C var/nslog/; done", shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
    finally:
        if gunzipresult.returncode == 0:
            sp.run("fixperms ./", shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
            print(style.YELLOW + '{:-^87}\n'.format('Gunzip all .gz files under /var/log') + style.RESET)
            print(style.YELLOW + str(gunzipresult.stderr.decode('utf-8')) + style.RESET)
            print(style.GREEN + "Extracted all files in var/log!!!" + style.RESET)
        else:
            print(style.RED + "Nothing to do here in var/log/" + style.RESET)
        if gunzipnewnsresult.returncode == 0:
            sp.run("fixperms ./", shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
            print(style.YELLOW + '{:-^87}\n'.format('Gunzip all .gz files under /var/nslog') + style.RESET)
            print(style.YELLOW + str(gunzipnewnsresult.stderr.decode('utf-8')) + style.RESET)
            print(style.GREEN + "Extracted all files var/nslog!!!" + style.RESET)
        else:
            print(style.RED + "Nothing to do here in var/nslog/" + style.RESET)
        try:
            fate_message = "show -gz"; send_request(version, username, url, fate_message, "Success")
        finally:
            quit()
elif args.im:
    try:
        logger.info(os.getcwd() + " - show -im")
        try:
            log_turnover = sp.run('''awk '/turned over due to size/{print}' var/log/ns.log''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
            nslog = sp.run("awk 'BEGIN{printf \"%s\\t| %s\\t  | %s\\n\", \"Start_Time\",\"End_Time\",\"File_Name\"}'; for i in $(printf '%s\n' var/log/ns.lo* | grep -v gz | grep -v tar); do awk 'NR == 2 {printf \"%s %02d %s\\t| \", $1,$2,$3}END{printf \"%s %02d %s | %s\\n\",  $1,$2,$3,substr(ARGV[1],9)}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        finally:
            if nslog.returncode == 0:
                if len(log_turnover) > 23:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler ns.log timestamp IndexMessages') + style.RESET + nslog.stdout)
                    print(style.YELLOW + f'Warning: Original ns.log is greater than 15MB, please request ns.log seperately..' + style.RESET)
            else:
                print(style.RED + '{:-^87}\n'.format('Unable to read ns.log') + style.RESET)
    finally:
        try:
            fate_message = "show -im"; send_request(version, username, url, fate_message, "Success")
        finally:
            quit()

elif args.imall:
    try:
        logger.info(os.getcwd() + " - show -imall")
        if os.path.isfile("conFetch/show_output/show_imall.txt") and os.path.getsize("conFetch/show_output/show_imall.txt") > 23:
            with open("conFetch/show_output/show_imall.txt", "r") as show_ha:
                print(show_ha.read())
                try:
                    fate_message = "show -imall pre-data"; send_request(version, username, url, fate_message, "Success")
                finally:
                    quit()
        else:
            # Printing Index messages for ns.log, auth.log, bash.log, nitro.log, notice.log, nsvpn.log, sh.log
            try:
                nslog = sp.run("awk 'BEGIN{printf \"%s\\t| %s\\t  | %s\\n\", \"Start_Time\",\"End_Time\",\"File_Name\"}'; for i in $(printf '%s\n' var/log/ns.lo* | grep -v gz | grep -v tar); do awk 'NR == 2 {printf \"%s %02d %s\\t| \", $1,$2,$3}END{printf \"%s %02d %s | %s\\n\",  $1,$2,$3,substr(ARGV[1],9)}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                authlog = sp.run("awk 'BEGIN{printf \"%s\\t| %s\\t  | %s\\n\", \"Start_Time\",\"End_Time\",\"File_Name\"}'; for i in $(printf '%s\n' var/log/auth.lo* | grep -v gz | grep -v tar); do awk 'NR == 1 {printf \"%s %02d %s\\t| \", $1,$2,$3}END{printf \"%s %02d %s | %s\\n\",  $1,$2,$3,substr(ARGV[1],9)}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                bashlog = sp.run("awk 'BEGIN{printf \"%s\\t| %s\\t  | %s\\n\", \"Start_Time\",\"End_Time\",\"File_Name\"}'; for i in $(printf '%s\n' var/log/bash.lo* | grep -v gz | grep -v tar); do awk 'NR == 1 {printf \"%s %02d %s\\t| \", $1,$2,$3}END{printf \"%s %02d %s | %s\\n\",  $1,$2,$3,substr(ARGV[1],9)}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                messages = sp.run("awk 'BEGIN{printf \"%s\\t| %s\\t  | %s\\n\", \"Start_Time\",\"End_Time\",\"File_Name\"}'; for i in $(printf '%s\n' var/log/message* | grep -v gz | grep -v tar); do awk 'NR == 1 {printf \"%s %02d %s\\t| \", $1,$2,$3}END{printf \"%s %02d %s | %s\\n\",  $1,$2,$3,substr(ARGV[1],9)}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                nitrolog = sp.run("awk 'BEGIN{printf \"%s\\t| %s\\t  | %s\\n\", \"Start_Time\",\"End_Time\",\"File_Name\"}'; for i in $(printf '%s\n' var/log/nitro.lo* | grep -v gz | grep -v tar); do awk 'NR == 1 {printf \"%s %02d %s\\t| \", $1,$2,$3}END{printf \"%s %02d %s | %s\\n\",  $1,$2,$3,substr(ARGV[1],9)}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                noticelog = sp.run("awk 'BEGIN{printf \"%s\\t| %s\\t  | %s\\n\", \"Start_Time\",\"End_Time\",\"File_Name\"}'; for i in $(printf '%s\n' var/log/notice.lo* | grep -v gz | grep -v tar); do awk 'NR == 1 {printf \"%s %02d %s\\t| \", $1,$2,$3}END{printf \"%s %02d %s | %s\\n\",  $1,$2,$3,substr(ARGV[1],9)}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                nsvpnlog = sp.run("awk 'BEGIN{printf \"%s\\t| %s\\t  | %s\\n\", \"Start_Time\",\"End_Time\",\"File_Name\"}'; for i in $(printf '%s\n' var/log/nsvpn.lo* | grep -v gz | grep -v tar); do awk 'NR == 1 {printf \"%s %02d %s\\t| \", $1,$2,$3}END{printf \"%s %02d %s | %s\\n\",  $1,$2,$3,substr(ARGV[1],9)}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                shlog = sp.run("awk 'BEGIN{printf \"%s\\t| %s\\t  | %s\\n\", \"Start_Time\",\"End_Time\",\"File_Name\"}'; for i in $(printf '%s\n' var/log/sh.lo* | grep -v gz | grep -v tar); do awk 'NR == 1 {printf \"%s %02d %s\\t| \", $1,$2,$3}END{printf \"%s %02d %s | %s\\n\",  $1,$2,$3,substr(ARGV[1],9)}' $i; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                newnslog = sp.run("awk 'BEGIN{printf \"%s\\t\\t | %s\\t\\t    | %s\\n\", \"Start_Time\",\"End_Time\",\"File_Name\"}'; for i in $(printf '%s\\n' var/nslog/newnslo* | grep -v gz | grep -v tar); do nsconmsg -K $i -d setime | awk '!/Displaying|NetScaler|size|duration/{$1=$2=\"\"; printf \"%s\\t|\", $0}END{printf \"\\n\"}'; echo $i; done | sed 'N;s/\\n/ /' | awk '{$1=$1=\"\"}1' | sed 's/^ //' | sed -r '/^\\s*$/d' | awk '{printf  \"%s %s %02s %s %s %s %s %s %02s %s %s %s %s\\n\", $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
            finally:
                if nslog.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler ns.log timestamp IndexMessages') + style.RESET + nslog.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read ns.log') + style.RESET)
                if authlog.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler auth.log timestamp IndexMessages') + style.RESET + authlog.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read auth.log') + style.RESET)
                if bashlog.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler bash.log timestamp IndexMessages') + style.RESET + bashlog.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read bash.log') + style.RESET)
                if messages.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler messages timestamp IndexMessages') + style.RESET + messages.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read messages') + style.RESET)
                if nitrolog.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler nitro.log timestamp IndexMessages') + style.RESET + nitrolog.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read nitro.log') + style.RESET)
                if noticelog.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler notice.log timestamp IndexMessages') + style.RESET + noticelog.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read notice.log') + style.RESET)
                if nsvpnlog.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler nsvpn.log timestamp IndexMessages') + style.RESET + nsvpnlog.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read nsvpn.log') + style.RESET)
                if shlog.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler sh.log timestamp IndexMessages') + style.RESET + shlog.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read sh.log') + style.RESET)
                if newnslog.returncode == 0:
                    print(style.YELLOW + '{:-^87}\n'.format('NetScaler newnslog timestamp IndexMessages') + style.RESET + newnslog.stdout)
                else:
                    print(style.RED + '{:-^87}\n'.format('Unable to read newnslog') + style.RESET)
            try:
                fate_message = "show -imall"; send_request(version, username, url, fate_message, "Success")
            finally:
                quit()
    finally:
        pass

elif args.N:
    box_time = str(sp.run("awk -F'GMT' '/Timezone:/&&/GMT/{print substr($2,1,6)}' shell/showcmds.txt | awk 'BEGIN { found = 0 } { output = $0; found = 1 } END { if (found) print output; else print \"00:00\" }'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip())
    box_time_mins = (int(re.match(r"([-+]?)(\d+):(\d+)", box_time).group(2)) * 60) + int(re.match(r"([-+]?)(\d+):(\d+)", box_time).group(3)); box_time_mins *= -1 if re.match(r"([-+]?)(\d+):(\d+)", box_time).group(1) == "-" else 1
    try:
        newnslog = sp.run("""for i in $(ls -lah var/nslog/ | awk '!/tar|gz/&&/newnslog./{print "var/nslog/" $NF}END{print "var/nslog/newnslog"}'); do nsconmsg -K $i -d setime | awk '!/Displaying|NetScaler|size|duration/{$1=$2=""; printf "%s\\t|", $0}END{printf "\\n"}'; echo $i; done | sed 'N;s/\\n/ /' | awk '{$1=$1=""}1' | sed 's/^ //' | sed -r '/^\\s*$/d' | awk '{printf "%s %s %02s %s %s %s %s %s %02s %s %s %s %s\\n", $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13}'""", shell=True, text=True, capture_output=True,).stdout.strip()
        input_format = "%a %b %d %H:%M:%S %Y"
        output_format = "%a %b %d %H:%M:%S %Y"
        lines = newnslog.strip().split('\n')
        final_output = []
        header = "     GMT Start_Time      |       GMT End_Time       |   GMT " + str(box_time)+ " Start_Time  |   GMT " + str(box_time)+ " End_Time    |     Filename"
        gmtheader = "     GMT Start_Time      |       GMT End_Time       |     Filename"
        for line in lines:
            columns = line.split(' | ')
            try:
                start_timestamp = datetime.strptime(columns[0], input_format)
                end_timestamp = datetime.strptime(columns[1], input_format)
                raw_start_time = columns[0]
                raw_end_time = columns[1]
                newnslog_name = columns[2]
                updated_start = start_timestamp + timedelta(minutes=int(box_time_mins))
                updated_end = end_timestamp + timedelta(minutes=int(box_time_mins))
                updated_start_str = updated_start.strftime(output_format)
                updated_end_str = updated_end.strftime(output_format)
                updated_columns = [style.GREEN + raw_start_time + style.RESET, style.CYAN + raw_end_time +style.RESET, style.GREEN + updated_start_str + style.RESET, style.CYAN + updated_end_str + style.RESET , newnslog_name]
                updated_line = ' | '.join(updated_columns)
                final_output.append(updated_line)
            except ValueError:
                print("Invalid date format in line:", line)
    except sp.CalledProcessError as e:
        print("Error:", e.stderr)
    finally:
        if int(box_time_mins) == 0:
            print(style.YELLOW + '{:-^87}'.format('NetScaler newnslog in GMT Only') + "\n" + style.RESET)
            print(gmtheader)
            print(newnslog)
            try:
                fate_message = "show -N GMT"; send_request(version, username, url, fate_message, "Success")
            finally:
                quit()
        else:
            print(style.YELLOW + '{:-^128}'.format('NetScaler newnslog in GMT and Local Timezone') + "\n" + style.RESET)
            print(header)
            for line in final_output:
                print(line)
            try:
                fate_message = "show -N N+GMT"; send_request(version, username, url, fate_message, "Success")
            finally:
                quit()

elif args.error:
    try:
        logger.info(os.getcwd() + " - show -error")
        # Highlight all the ERROR|err|down|disconnect|fail containing lines in input file.
        print(sp.run("if test -f var/log/" + args.error + "; then awk '/ERROR|err|Err|down|disconnect|fail/{print \"\033[1;31m\"$0\"\033[0m\";next}{print $0}' var/log/" + args.error + "; else echo \"File not found\"; fi", shell=True).stdout)
    finally:
        fate_message = "show -error"; send_request(version, username, url, fate_message, "Success")
        quit()
elif args.show:
    try:
        logger.info(os.getcwd() + " - show -show - " + args.show)
        # Prining show command output from file shell/showcmds.txt | Try without show
        showout = os.popen("sed -nr \"/^exec: show " + args.show + "/,/Done/p\" shell/showcmds.txt").read().strip()
        if len(showout) < 1:
            print(style.RED + "Incorrect show command. Please use the below available match...\n" + style.RESET)
            showsuggest = os.popen("cat shell/showcmds.txt | grep exec | grep -i " + "\"" + args.show + "\"" + " | awk '{$1=$2=\"\"}1' | cut -c3-").read().strip()
            if len(showsuggest) < 1:
                print(style.RED + "No matching show command found." + style.RESET)
                try:
                    fate_message = "show -show " + args.show; send_request(version, username, url, fate_message, "Failed")
                finally:
                    pass
            else:
                print(style.CYAN + os.popen("cat shell/showcmds.txt | grep exec | grep -i " + "\"" + args.show + "\"" + " | awk '{$1=$2=\"\"}1' | cut -c3-").read().strip() + style.RESET)
                try:
                    fate_message = "show -show " + args.show; send_request(version, username, url, fate_message, "Partial")
                finally:
                    pass
        else:
            print(style.YELLOW + '{:-^87}'.format('Showcmd '+args.show+' Output') + "\n" + style.RESET)
            print(showout)
            try:
                fate_message = "show -show " + args.show; send_request(version, username, url, fate_message, "Success")
            finally:
                pass
    finally:
        quit()
elif args.stat:
    try:
        logger.info(os.getcwd() + " - show -stat - " + args.stat)
        # Prining stat command output from file shell/statcmds.txt | Try without stat
        statout = os.popen("sed -nr \"/^exec: stat " + args.stat + "/,/Done/p\" shell/statcmds.txt").read().strip()
        if len(statout) < 1:
            print(style.RED + "Incorrect stat command. Please use the below available match...\n" + style.RESET)
            statsuggest = os.popen("cat shell/statcmds.txt | grep exec | grep -i " + "\"" + args.stat + "\"" + " | awk '{$1=$2=\"\"}1' | cut -c3-").read().strip()
            if len(statsuggest) < 1:
                print(style.RED + "No matching stat command found." + style.RESET)
                try:
                    fate_message = "show -stat " + args.stat; send_request(version, username, url, fate_message, "Failed")
                finally:
                    pass
            else:
                print(style.CYAN + os.popen("cat shell/statcmds.txt | grep exec | grep -i " + "\"" + args.stat + "\"" + " | awk '{$1=$2=\"\"}1' | cut -c3-").read().strip() + style.RESET)
                try:
                    fate_message = "show -stat " + args.stat; send_request(version, username, url, fate_message, "Partial")
                finally:
                    pass
        else:
            print(style.YELLOW + '{:-^87}'.format('Statcmd '+args.stat+' Output') + "\n" + style.RESET)
            print(statout)
            try:
                fate_message = "show -stat " + args.stat; send_request(version, username, url, fate_message, "Success")
            finally:
                pass
    finally:
        quit()
elif args.vip:
    try:
        logger.info(os.getcwd() + " - show -vip")
        # Prining formatted VIP output from file shell/ns_running_config.conf.txt
        lbvipout = os.popen("awk '/^add lb vserver/{printf \"\033[0;92m%s\033[00m | %s | %s | %s | %s |\\n\", $2, $4, $5, $7, $6}' shell/ns_running_config.conf  | column -t -s'|'").read().strip()
        csvipout = os.popen("awk '/^add cs vserver/{printf \"\033[0;96m%s\033[00m | %s | %s | %s | %s |\\n\", $2, $4, $7, $11, $8}' shell/ns_running_config.conf  | column -t -s'|'").read().strip()
        gslbvipout = os.popen("awk '/^add gslb vserver/{printf \"\033[38;5;208m%s\033[00m | %s | %s | %s | %s |\\n\", $2, $4, $7, $9, $11}' shell/ns_running_config.conf  | column -t -s'|'").read().strip()
        authvipout = os.popen("awk '/^add authentication vserver/{printf \"\033[0;95m%s\033[00m | %s | %s | %s\\n\", $2, $4, $5, $6}' shell/ns_running_config.conf  | column -t -s'|'").read().strip()
        vpnvipout = os.popen("awk '/^add vpn vserver/{printf \"\033[0;94m%s\033[00m | %s | %s | %s\\n\", $2, $4, $5, $6}' shell/ns_running_config.conf  | column -t -s'|'").read().strip()
    finally:
        if len(lbvipout) > 2:
            print(style.YELLOW + '{:-^87}'.format('Load Balancing VIP Basic Info'))
            print(lbvipout + "\n")
        else:
            pass
        if len(csvipout) > 2:
            print(style.YELLOW + '{:-^87}'.format('Content Switching VIP Basic Info'))
            print(csvipout + "\n")
        else:
            pass
        if len(gslbvipout) > 2:
            print(style.YELLOW + '{:-^87}'.format('GSLB VIP Basic Info'))
            print(gslbvipout + "\n")
        else:
            pass
        if len(authvipout) > 2:
            print(style.YELLOW + '{:-^87}'.format('Authentication VIP Basic Info'))
            print(authvipout + "\n")
        else:
            pass
        if len(vpnvipout) > 2:
            print(style.YELLOW + '{:-^87}'.format('VPN VIP Basic Info'))
            print(vpnvipout + "\n")
        else:
            pass
        try:
            fate_message = "show -vip"; send_request(version, username, url, fate_message, "Success")
        finally:
            quit()

elif args.lbvip:
    try:
        vipname = str(args.lbvip)
        vip_service_bindings = sp.run('''awk '!/policy/&&/''' + vipname + '''([^a-zA-Z0-9]|$)/&&/bind lb vserver/{print $5}' shell/ns_running_config.conf''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        vip_service_bindings_list = vip_service_bindings.stdout.splitlines()
        server_bindings = {}
        serverGroup_bindings = {}
        serverGroup_members = {}
        for service in vip_service_bindings_list:
            vip_server_bindings = sp.run('''awk '/add service ''' + service + '''([^a-zA-Z0-9]|$)/{print $4, $5, $6}' shell/ns_running_config.conf''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
            if vip_server_bindings.stdout.strip():
                server_bindings[service] = vip_server_bindings.stdout.strip()
        for service in vip_service_bindings_list:
            vip_serverGroup_bindings = sp.run('''awk '!/monitor/&&/bind serviceGroup ''' + service + '''([^a-zA-Z0-9]|$)/{print $4, $5}' shell/ns_running_config.conf''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
            if vip_serverGroup_bindings.stdout.strip():
                serverGroup_bindings[service] = []
                for line in vip_serverGroup_bindings.stdout.strip().splitlines():
                    parts = line.split()
                    if len(parts) >= 2:
                        serverGroup_bindings[service].append(f"{parts[0]} {parts[1]}")
                        vip_add_server_bindings = sp.run('''awk '/add server ''' + parts[0] + '''([^a-zA-Z0-9]|$)/{print $4}' shell/ns_running_config.conf''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                        if parts[0] not in serverGroup_members:
                            serverGroup_members[parts[0]] = []
                        serverGroup_members[parts[0]].extend(vip_add_server_bindings.stdout.strip().splitlines())
    finally:
        print(style.YELLOW + '{:-^87}'.format('LB VIP Bindings') + style.RESET)
        print(f"VIP Name: {style.GREEN + vipname + style.RESET}")
        if server_bindings:
            print(f"\n{style.YELLOW + 'Service':<20} {'Server' :<30}" + style.RESET)
            print(f"{style.YELLOW + '-'*87}" + style.RESET)
            for service, server in server_bindings.items():
                print(f"{service:<20} {server:<30}")
        if serverGroup_bindings:
            print(f"\n{style.YELLOW + 'Service_Group':<20} {'ServiceGroup_Members':<30}" + style.RESET)
            print(f"{style.YELLOW + '-'*87}" + style.RESET)
            for serviceGroup, servers in serverGroup_bindings.items():
                for server in servers:
                    print(f"{serviceGroup:<20} {server:<30}")
        if serverGroup_members:
            print(f"\n{style.YELLOW + 'ServiceGroup_Member':<20} {'Server':<30}" + style.RESET)
            print(f"{'-'*87}")
            for member, details in serverGroup_members.items():
                for detail in details:
                    print(f"{member:<20} {detail:<30}")
        try:
            fate_message = "show --lbvip"; send_request(version, username, url, fate_message, "Success")
        finally:
            quit()

elif args.v:
    try:
        # ns.conf name list and last saved timestamp
        nsconf_Version = sp.run("for i in $(ls -lah nsconfig | awk '/ns.con/{print \"nsconfig/\"$NF}'); do printf \"$i*\" ; awk '/#NS/||/# Last modified by/{printf}END{print \"\"}' $i | sed -e 's/#//g; s/Last modified by `save config`,/*/g'; done | column -t -s \"*\"", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        if nsconf_Version.returncode == 0:
            print(style.YELLOW + '{:-^87}'.format('ns.conf name and Last Saved Timestamp') + style.RESET)
            print(nsconf_Version.stdout)
        else:
            print(style.RED + '{:-^87}'.format('No ns.conf files found under nsconfig/') + style.RESET)
    finally:
        try:
            fate_message = "show -v"; send_request(version, username, url, fate_message, "Success")
        finally:
            quit()

elif args.case:
    appliance_org_check = None
    # Get SFDC API Keys
    try:
        sfdcurl = "https://ftltoolswebapi.deva.citrite.net/sfaas/api/salesforce"
        tokenpayload = {"feature": "login", "parameters": [{"name": "tokenuri", "value": "https://login.salesforce.com/services/oauth2/token", "isbase64": "false"}] }
        sfdcreq = request.Request(sfdcurl)
        sfdcreq.add_header('Content-Type', 'application/json; charset=utf-8')
        jsondata = json.dumps(tokenpayload)
        jsondataasbytes = jsondata.encode('utf-8')
        sfdcreq.add_header('Content-Length', len(jsondataasbytes))
        sfdctoken = json.loads(request.urlopen(sfdcreq, jsondataasbytes).read().decode("utf-8", "ignore"))['options'][0]['values'][0]
    except:
        print(style.RED + "Unable to get SFDC Token" + style.RESET)

    # Get case number from path
    try:
        casenum = str(os.popen("pwd").read().strip().split("/")[3])
    except IndexError:
        print(style.RED + "Unable to get case number from your current working directory" + style.RESET)
    # Get CaseAge and Entitlement Details
    try:
        CxContactEmail = 'None'
        OtherCommunicationEmail__c = 'None'
        headers = {'Content-Type': 'application/json'}
        data = {"feature": "selectcasequery", "parameters": [{"name": "salesforcelogintoken", "value": ""+sfdctoken+"", "isbase64": "false"}, {"name": "selectfields", "value": "EntitlementId,Age__c,Account_Name__c,Account_Org_ID__c,Case_Created_Date_Qual__c,Case_Owner__c,Case_Review_Flag__c,Case_Status__c,Case_Team__c,CaseReopened__c,ContactEmail,ContactCountry__c,ContactMobile,ContactPhone,Dev_Engineer__c,End_of_Support__c,Eng_Status__c,EngCase_SubmittedDate__c,Escalated_By__c,EscalatedDate__c,First_Response_Severity__c,First_Response_Time_Taken__c,Fixed_Known_Issue_ID__c,Frontline_to_Escalation_Severity__c,Frontline_to_Escalation_Violated__c,Highest_Severity__c,Initial_Severity__c,IsEscalated,IsEscalatedtoEng__c,IsPartner__c,KT_Applied__c,Last_Customer_Contact_Timestamp__c,Manager_Name__c,Number_of_Audits__c,Offering_Level__c,OtherCommunicationEmail__c,Product_Line_Name__c,Record_GEO__c,Serial_Number__c,ServiceProduct_Name__c,Target_GEO__c", "isbase64": "false"}, {"name": "tablename", "value": "Case", "isbase64": "false"}, {"name": "selectcondition", "value": "CaseNumber = '"+casenum+"'", "isbase64": "false"}]}
        jsondata = json.dumps(data)
        jsondataasbytes = jsondata.encode('utf-8')
        finaldata = json.loads(request.urlopen(sfdcreq, jsondataasbytes).read().decode("utf-8", "ignore"))['options'][0]['values'][0]
        finaldata = json.loads(finaldata)
        EntitlementId = str(finaldata["EntitlementId"])
        Age__c = str(finaldata["Age__c"])
        Account_Name__c = str(finaldata["Account_Name__c"])
        Account_Org_ID__c = str(finaldata["Account_Org_ID__c"])
        Case_Created_Date_Qual__c = str(finaldata["Case_Created_Date_Qual__c"])
        Case_Owner__c = str(finaldata["Case_Owner__c"])
        Case_Review_Flag__c = str(finaldata["Case_Review_Flag__c"])
        Case_Status__c = str(finaldata["Case_Status__c"])
        Case_Team__c = str(finaldata["Case_Team__c"])
        CaseReopened__c = str(finaldata["CaseReopened__c"])
        ContactEmail = str(finaldata["ContactEmail"])
        ContactCountry__c = str(finaldata["ContactCountry__c"])
        ContactMobile = str(finaldata["ContactMobile"])
        ContactPhone = str(finaldata["ContactPhone"])
        Dev_Engineer__c = str(finaldata["Dev_Engineer__c"])
        End_of_Support__c = str(finaldata["End_of_Support__c"])
        Eng_Status__c = str(finaldata["Eng_Status__c"])
        EngCase_SubmittedDate__c = str(finaldata["EngCase_SubmittedDate__c"])
        Escalated_By__c = str(finaldata["Escalated_By__c"])
        EscalatedDate__c = str(finaldata["EscalatedDate__c"])
        First_Response_Severity__c = str(finaldata["First_Response_Severity__c"])
        First_Response_Time_Taken__c = str(finaldata["First_Response_Time_Taken__c"])
        Fixed_Known_Issue_ID__c = str(finaldata["Fixed_Known_Issue_ID__c"])
        Frontline_to_Escalation_Severity__c = str(finaldata["Frontline_to_Escalation_Severity__c"])
        Frontline_to_Escalation_Violated__c = str(finaldata["Frontline_to_Escalation_Violated__c"])
        Highest_Severity__c = str(finaldata["Highest_Severity__c"])
        Initial_Severity__c = str(finaldata["Initial_Severity__c"])
        IsEscalated = str(finaldata["IsEscalated"])
        IsEscalatedtoEng__c = str(finaldata["IsEscalatedtoEng__c"])
        OtherCommunicationEmail__c = str(finaldata["OtherCommunicationEmail__c"])
        Serial_Number__c = str(finaldata["Serial_Number__c"])
        IsPartner__c = str(finaldata["IsPartner__c"])
        # Entitlement Logic
        data = ({"feature": "selectcasequery", "parameters": [{"name": "salesforcelogintoken", "value": ""+sfdctoken+"", "isbase64": "false"}, {"name": "selectfields", "value": "EndDate", "isbase64": "false"}, {"name": "tablename", "value": "Entitlement", "isbase64": "false"}, {"name": "selectcondition", "value": "Id = '"+EntitlementId+"'", "isbase64": "false"}]})
        case_serial_data = ({"feature": "selectcasequery", "parameters": [{"name": "salesforcelogintoken", "value": ""+sfdctoken+"", "isbase64": "false"}, {"name": "selectfields", "value": "Name,Maintenance_End_Date__c", "isbase64": "false"}, {"name": "tablename", "value": "Asset_Component__c", "isbase64": "false"}, {"name": "selectcondition", "value": "Id = '"+Serial_Number__c+"'", "isbase64": "false"}]})
        platformserial = str(sp.run("sed -n '/^exec: show ns hardware/,/Done/p' shell/showcmds.txt | awk '/Serial/{printf $NF}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout)
        platformserial_json = ({"feature": "selectcasequery", "parameters": [{"name": "salesforcelogintoken", "value": ""+sfdctoken+"", "isbase64": "false"}, {"name": "selectfields", "value": "Asset_ID__c,frmAccount_Org_ID__c,Maintenance_End_Date__c", "isbase64": "false"}, {"name": "tablename", "value": "Asset_Component__c", "isbase64": "false"}, {"name": "selectcondition", "value": "Name = '"+platformserial+"'", "isbase64": "false"}]})
        # Entitlement cooking
        jsondata = json.dumps(data)
        jsondataasbytes = jsondata.encode('utf-8')
        Entitlement_EndDate = ast.literal_eval(json.loads(request.urlopen(sfdcreq, jsondataasbytes).read().decode("utf-8", "ignore"))['options'][0]['values'][0])["EndDate"]
        Entitlement_EndDate = datetime.strptime(Entitlement_EndDate, "%Y-%m-%d").date()
        current_date = datetime.today()
        current_date = current_date.strftime("%Y-%m-%d")
        if Entitlement_EndDate.strftime("%Y-%m-%d") > current_date:
            Entitlement_EndDate = style.GREEN + str(Entitlement_EndDate) + style.RESET
        else:
            Entitlement_EndDate = style.RED + str(Entitlement_EndDate) + style.RESET
        # Serial number on case cooking
        jsondata = json.dumps(case_serial_data)
        jsondataasbytes = jsondata.encode('utf-8')
        try:
            Serial_Number__c = ast.literal_eval(json.loads(request.urlopen(sfdcreq, jsondataasbytes).read().decode("utf-8", "ignore"))['options'][0]['values'][0])["Name"]
            Maintenance_End_Date__c = ast.literal_eval(json.loads(request.urlopen(sfdcreq, jsondataasbytes).read().decode("utf-8", "ignore"))['options'][0]['values'][0])["Maintenance_End_Date__c"]
            Maintenance_End_Date__c = datetime.strptime(Maintenance_End_Date__c, "%Y-%m-%d").date()
            current_date = datetime.today()
            current_date = current_date.strftime("%Y-%m-%d")
            if Maintenance_End_Date__c.strftime("%Y-%m-%d") > current_date:
                Maintenance_End_Date__c = style.GREEN + str(Maintenance_End_Date__c) + style.RESET
            else:
                Maintenance_End_Date__c = style.RED + str(Maintenance_End_Date__c) + style.RESET
        except TypeError:
            Maintenance_End_Date__c = style.YELLOW + "Serial Number Not Present on Case" + style.RESET
        # Serial number on bundle cooking
        jsondata = json.dumps(platformserial_json)
        jsondataasbytes = jsondata.encode('utf-8')
        try:
            platformserial_Maintenance_End_Date__c = ((json.loads(request.urlopen(sfdcreq, jsondataasbytes).read().decode("utf-8", "ignore"))['options']))
            end_dates = []
            if not len(platformserial_Maintenance_End_Date__c) == 0:
                for entry in platformserial_Maintenance_End_Date__c:
                    values = entry['values']
                    if values:
                        json_data = json.loads(values[0])
                        end_date = json_data.get('Maintenance_End_Date__c')
                        frmAccount_Org_ID__c = json_data.get('frmAccount_Org_ID__c')
                        if end_date:
                            end_dates.append(end_date)
                try:
                    # Find the latest date
                    platformserial_Maintenance_End_Date__c = max(end_dates)
                    platformserial_Maintenance_End_Date__c = datetime.strptime(platformserial_Maintenance_End_Date__c, "%Y-%m-%d").date()
                    current_date = datetime.today()
                    current_date = current_date.strftime("%Y-%m-%d")
                    if platformserial_Maintenance_End_Date__c.strftime("%Y-%m-%d") > current_date:
                        platformserial_Maintenance_End_Date__c = style.GREEN + str(platformserial_Maintenance_End_Date__c) + style.RESET
                    else:
                        platformserial_Maintenance_End_Date__c = style.RED + str(platformserial_Maintenance_End_Date__c) + style.RESET
                    if int(frmAccount_Org_ID__c) != int(Account_Org_ID__c):
                        appliance_org_check = ("Appliance Org Check: " + style.RED + "Appliance belongs to " + frmAccount_Org_ID__c + " but Case Org Id is " + Account_Org_ID__c + "" + style.RESET)
                except:
                    pass
            else:
                platformserial_Maintenance_End_Date__c = style.YELLOW + "Not a HW Model" + style.RESET
        except IndexError:
            platformserial_Maintenance_End_Date__c = style.YELLOW + "Not a HW Model" + style.RESET
        # Engineering Logic
        data = ({"feature": "selectcasequery", "parameters": [{"name": "salesforcelogintoken", "value": ""+sfdctoken+"", "isbase64": "false"}, {"name": "selectfields", "value": "Name", "isbase64": "false"}, {"name": "tablename", "value": "Contact", "isbase64": "false"}, {"name": "selectcondition", "value": "Id = '"+Dev_Engineer__c+"'", "isbase64": "false"}]})
        jsondata = json.dumps(data)
        jsondataasbytes = jsondata.encode('utf-8')
        try:
            Dev_Engineer__c = str(ast.literal_eval(json.loads(request.urlopen(sfdcreq, jsondataasbytes).read().decode("utf-8", "ignore"))['options'][0]['values'][0])["Name"])
        except TypeError:
            Dev_Engineer__c = 'None'
        # Survey Response
        Idcsat = []
        Iddsat = []
        satisfaction_count = 0
        dissatisfaction_count = 0
        Cxsatisfaction_count = 0
        Cxdissatisfaction_count = 0
        reference_date = datetime.now()
        orgidsurveydata = {"feature": "selectcasequery", "parameters": [{"name": "salesforcelogintoken", "value": sfdctoken, "isbase64": "false"}, {"name": "selectfields", "value": "Case__c,Survey_Date__c,CS_Survey_Satisfaction__c", "isbase64": "false"}, {"name": "tablename", "value": "Survey__c", "isbase64": "false"}, {"name": "selectcondition", "value": f"Account_ID__c = '{Account_Org_ID__c}'", "isbase64": "false"}]}
        jsondata = json.dumps(orgidsurveydata)
        jsondataasbytes = jsondata.encode('utf-8')
        response = request.urlopen(sfdcreq, jsondataasbytes).read().decode("utf-8", "ignore")
        parsed_json = json.loads(response)
        options = parsed_json.get('options', [])
        for option in options:
            values = option.get('values', [])
            for value in values:
                nested_dict = json.loads(value)
                survey_date_str = nested_dict.get("Survey_Date__c")
                survey_date = datetime.strptime(survey_date_str, '%Y-%m-%d')
                if reference_date - timedelta(days=365) <= survey_date <= reference_date:
                    satisfaction = nested_dict.get("CS_Survey_Satisfaction__c")
                    if satisfaction == "Satisfaction":
                        Idcsat.append(nested_dict.get("Case__c"))
                        satisfaction_count += 1
                    elif satisfaction == "Dissatisfaction":
                        Iddsat.append(nested_dict.get("Case__c"))
                        dissatisfaction_count += 1
        for caseid in Idcsat:
            contactdata = {"feature": "selectcasequery", "parameters": [{"name": "salesforcelogintoken", "value": ""+sfdctoken+"", "isbase64": "false"}, {"name": "selectfields", "value": "ContactEmail, OtherCommunicationEmail__c", "isbase64": "false"}, {"name": "tablename", "value": "Case", "isbase64": "false"}, {"name": "selectcondition", "value": "Id = '"+caseid+"' AND (ContactEmail = '"+ContactEmail+"' OR OtherCommunicationEmail__c = '"+OtherCommunicationEmail__c+"')", "isbase64": "false"}]}
            jsondata = json.dumps(contactdata)
            jsondataasbytes = jsondata.encode('utf-8')
            response = request.urlopen(sfdcreq, jsondataasbytes).read().decode("utf-8", "ignore")
            parsed_json = json.loads(response)
            options = parsed_json.get('options', [])
            for option in options:
                values = option.get('values', [])
                for value in values:
                    nested_dict = json.loads(value)
                    CxContactEmail = nested_dict.get("ContactEmail")
                    CxOtherCommunicationEmail__c = nested_dict.get("OtherCommunicationEmail__c")
                    if str(ContactEmail).lower() == str(CxContactEmail).lower() or str(ContactEmail).lower() == str(CxOtherCommunicationEmail__c).lower():
                        Cxsatisfaction_count += 1
                    else:
                        pass
        for caseid in Iddsat:
            contactdata = {"feature": "selectcasequery", "parameters": [{"name": "salesforcelogintoken", "value": ""+sfdctoken+"", "isbase64": "false"}, {"name": "selectfields", "value": "ContactEmail, OtherCommunicationEmail__c", "isbase64": "false"}, {"name": "tablename", "value": "Case", "isbase64": "false"}, {"name": "selectcondition", "value": "Id = '"+caseid+"' AND (ContactEmail = '"+ContactEmail+"' OR OtherCommunicationEmail__c = '"+OtherCommunicationEmail__c+"')", "isbase64": "false"}]}
            jsondata = json.dumps(contactdata)
            jsondataasbytes = jsondata.encode('utf-8')
            response = request.urlopen(sfdcreq, jsondataasbytes).read().decode("utf-8", "ignore")
            parsed_json = json.loads(response)
            options = parsed_json.get('options', [])
            for option in options:
                values = option.get('values', [])
                for value in values:
                    nested_dict = json.loads(value)
                    CxContactEmail = nested_dict.get("ContactEmail")
                    CxOtherCommunicationEmail__c = nested_dict.get("OtherCommunicationEmail__c")
                    if str(ContactEmail).lower() == str(CxContactEmail).lower() or str(ContactEmail).lower() == str(CxOtherCommunicationEmail__c).lower():
                        Cxdissatisfaction_count += 1
                    else:
                        pass
    finally:
        print(style.YELLOW + '{:-^87}'.format('SalesForce Case details') + style.RESET)
        print(style.YELLOW + '{:-^87}'.format('Case Related') + style.RESET)
        print("\nSalesForce Case Number: " + casenum)
        print("Case Age: " + Age__c + " days old")
        print("Case created Date: " + Case_Created_Date_Qual__c)
        print("Case Status: " + Case_Status__c)
        print("Case Re-opened: " + CaseReopened__c)
        print("First Response Severity: " + First_Response_Severity__c)
        print("Initial Severity: " + Initial_Severity__c)
        print("Highest Severity: " + Highest_Severity__c)
        print("Escalated: " + IsEscalated)
        print("Engineering Involved: " + IsEscalatedtoEng__c)

        print(style.YELLOW + '{:-^87}'.format('Account Related') + style.RESET)
        print("Serial Number on Case: " + Serial_Number__c + " and its Maintenance End Date: " + Maintenance_End_Date__c)
        if "Not a HW Model" in str(platformserial_Maintenance_End_Date__c):
            print("SW Entitlement End Date: "+Entitlement_EndDate)
        else:
            print("Serial Number on Support Bundle: " + platformserial + " and its Maintenance End Date: " + str(platformserial_Maintenance_End_Date__c))
        print("End of Support: " + End_of_Support__c)
        if appliance_org_check is not None:
            print(appliance_org_check)
        print("Account Name: " + Account_Name__c)
        print("Org Id: " + Account_Org_ID__c)
        print("Customer Email: " + ContactEmail)
        print("Customer Mobile: " + ContactMobile)
        print("Customer Phone: " + ContactPhone)
        print("Partner Account: " + IsPartner__c)
        CxcurClock = sp.run("zdump $(awk '/Timezone:/&&/GMT/{print $2}' shell/showcmds.txt | awk -F- '{print substr($1,11), $NF}')", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
        if "/" in CxcurClock.stdout:
            print("Customer Current Clock: " + CxcurClock.stdout)
        elif "source line number 1" in CxcurClock.stderr:
            print("Customer Current Clock: Unable to find shell/showcmds.txt")
        else:
            print("Customer Current Clock: " + sp.run("zdump GMT", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout)

        print(style.YELLOW + '{:-^87}'.format('FrontLine Related') + style.RESET)
        print("Escalated by: " + Escalated_By__c)
        print("Escalated Date: " + EscalatedDate__c)
        print("First Response Time Taken (mins): " + First_Response_Time_Taken__c)
        print("FrontLine to Escalation Severity: " + Frontline_to_Escalation_Severity__c)
        print("Frontline to Escalation Violated: " + Frontline_to_Escalation_Violated__c)

        print(style.YELLOW + '{:-^87}'.format('Escalation Related') + style.RESET)
        print("Current Case Owner: " + Case_Owner__c)
        print("Case Team: " + Case_Team__c)

        print(style.YELLOW + '{:-^87}'.format('Engineering Related') + style.RESET)
        print("Jira ID: " + Fixed_Known_Issue_ID__c)
        print("Jira Created Date: " + EngCase_SubmittedDate__c)
        print("Engineering Status: " + Eng_Status__c)
        print("Engineering Owner: " + Dev_Engineer__c)

        print(style.YELLOW + '{:-^87}'.format('Last 12 months Survey for this OrgId ' + Account_Org_ID__c) + style.RESET)
        print(style.GREEN + "Satisfaction Survey: " + str(satisfaction_count) + style.RESET)
        print(style.RED + "Dissatisfaction Survey: " + str(dissatisfaction_count) + style.RESET)

        print(style.YELLOW + '{:-^87}'.format('Last 12 months Survey for this case Contact') + style.RESET)
        print(style.GREEN + "Satisfaction Survey: " + str(Cxsatisfaction_count) + style.RESET)
        print(style.RED + "Dissatisfaction Survey: " + str(Cxdissatisfaction_count) + style.RESET)
        print("\n")

        try:
            fate_message = "show --case"; send_request(version, username, url, fate_message, "Success")
        finally:
            quit()

elif args.j:
    try:
        keywords = [""] * 10
        print(style.YELLOW + '{:-^87}'.format('Jira Match for keyword') + style.RESET)
        if args.j:
            args_list = args.j if args.j else []
            keywords[:10] = list(zip_longest(args_list, keywords, fillvalue=""))[:10]
            search_string = " and ".join([kw[0] for kw in keywords if kw[0]])
            print(style.YELLOW + f'Searching for: {search_string} + "\n"' + style.RESET)
            JiraNumber = sp.run(f"curl -s -H 'Content-type: application/json' -d '{{\"feature\":\"search\", \"parameters\": [{{\"name\":\"authorization\",\"value\":\"c3ZjYWNjdF9zY2FuYWRtaW46ZG5KMmxxaGg==\"}},{{\"name\":\"searchstring\",\"value\":\"{search_string}\"}}]}}' -X POST http://10.14.18.46/SFaaS/api/jira | perl -wnE'say /\"[A-Z]+-[0-9]{{3,9}}/g' | sed 's/\"/ /g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        else:
            JiraNumber = ""
    finally:
        print(style.YELLOW + JiraNumber + style.RESET)
        if JiraNumber and JiraNumber.strip():
            for i in JiraNumber.split():
                detailedJira = sp.run("curl -s -H 'Content-type: application/json' -d '{\"name\":\"authorization\",\"value\":\"c3ZjYWNjdF9zY2FuYWRtaW46ZG5KMmxxaGg==\",\"feature\":\"fetchfields\",\"parameters\":[{\"name\":\"id\",\"value\":\""+i+"\",\"isbase64\":false},{\"name\":\"fields\",\"value\":\"summary,versions,status,resolution,fixVersions,created\",\"isbase64\":false}]}' -X POST http://10.14.18.46/SFaaS/api/jira | jq '.options | .[] | .values | .[]' | sed 's/\\\\//g' | awk '{print substr($0, 2, length($0) - 2)}' | jq -r  '\"\\(.key) \\(\"-->\") \\(.fields.summary) \\(\"-->\") \\(.fields.resolution.name) \\(\"-->\") \\(.fields.created[0:10]) \\(\"Found In:\") \\([.fields.versions[].name]) \\(\"--> Fixed In:\") \\([.fields.fixVersions[].name]) \\(\"\")\"'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                print(detailedJira)
            try:
                fate_message = "show -j"; send_request(version, username, url, fate_message, "Success")
            finally:
                quit()
        else:
            print("no match")
            try:
                fate_message = "show -j"; send_request(version, username, url, fate_message, "Failed")
            finally:
                quit()

elif args.J:
    try:
        print(style.YELLOW + '{:-^87}'.format('Jira Summary') + style.RESET)
        JiraNumber = str(args.J)
        detailedJira = sp.run("curl -s -H 'Content-type: application/json' -d '{\"name\":\"authorization\",\"value\":\"c3ZjYWNjdF9zY2FuYWRtaW46ZG5KMmxxaGg==\",\"feature\":\"fetchfields\",\"parameters\":[{\"name\":\"id\",\"value\":\""+JiraNumber+"\",\"isbase64\":false},{\"name\":\"fields\",\"value\":\"summary,versions,status,resolution,fixVersions,created,customfield_19731,assignee,creator\",\"isbase64\":false}]}' -X POST http://10.14.18.46/SFaaS/api/jira | jq '.options | .[] | .values | .[]' | sed 's/\\\\//g' | awk '{print substr($0, 2, length($0) - 2)}' | jq -r  '\"\\(.key) \\(\"\\nSummary:\") \\(.fields.summary) \\(\"\\nResolution:\") \\(.fields.resolution.name) \\(\"\\nCreated on:\") \\(.fields.created[0:10]) \\(\"\\nFound In:\") \\([.fields.versions[].name]) \\(\"\\nFStatus:\") \\([.fields.status.name]) \\(\"\\nFixed In:\") \\([.fields.fixVersions[].name]) \\(\"\\nJustification:\") \\(.fields.customfield_19731) \\(\"\\nAssignee:\") \\(.fields.assignee.name) \\(\"\\nReporter:\") \\(.fields.creator.name) \\(\"\\n\")\"'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
    finally:
        if detailedJira:
            print(detailedJira)
            try:
                fate_message = "show -J"; send_request(version, username, url, fate_message, "Success")
            finally:
                quit()
        else:
            try:
                fate_message = "show -J"; send_request(version, username, url, fate_message, "Failed")
            finally:
                quit()


elif args.bt:
    try:
        print(style.YELLOW + '{:-^87}'.format('NetScaler Core Auto Backtrace') + style.RESET)
        nsppecrashfile = sp.run("find \"$PWD\" $(pwd | cut -d'/' -f2,3,4 | sed 's/^/\//') | awk '/NSPPE-[0-9][0-9]-/&&!/gz|tar|zip|collector|0000|bigfoot|part/{print }'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.splitlines()
        collectornsppecrashfile = sp.run("awk '/NSPPE-[0-9][0-9]-/&&/-rw------/{print $NF}' shell/ls_lRtrp.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.split()
        codebuild = sp.run("awk '/#NS/{print}' shell/ns_running_config.conf | cut -c 4- | sed s/\" Build \"/-/g | sed 's/$/_nc.tgz/' | tr -d '\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        processlist = ["bgpd", "httpd", "iked", "imi", "imish", "iprep", "iprep_tool", "isisd", "metricscollector", "nsaaad", "nscopo", "nskrb_debug", "nsm", "ospf6d", "ospfd", "ripd", "ripngd", "snmpd", "nsaggregatord", "nscfsyncd", "nscollect", "nsconfigd", "nsconmsg", "nslped", "nsnetsvc", "nsnewstat", "nssetup", "nstraceaggregator", "syshealthd", "pitboss", "sshd"]
        processcrashfile = sp.run("find \"$PWD\" $(pwd | cut -d'/' -f2,3,4 | sed 's/^/\//')| awk '/bgpd-[0-9][0-9]|httpd-[0-9][0-9]|iked-[0-9][0-9]|imi-[0-9][0-9]|imish-[0-9][0-9]|iprep-[0-9][0-9]|iprep_tool-[0-9][0-9]|isisd-[0-9][0-9]|metricscollector-[0-9][0-9]|nsaaad-[0-9][0-9]|nscopo-[0-9][0-9]|nskrb_debug-[0-9][0-9]|nsm-[0-9][0-9]|ospf6d-[0-9][0-9]|ospfd-[0-9][0-9]|ripd-[0-9][0-9]|ripngd-[0-9][0-9]|snmpd-[0-9][0-9]|nsaggregatord-[0-9][0-9]|nscfsyncd-[0-9][0-9]|nscollect-[0-9][0-9]|nsconfigd-[0-9][0-9]|nsconmsg-[0-9][0-9]|nslped-[0-9][0-9]|nsnetsvc-[0-9][0-9]|nsnewstat-[0-9][0-9]|nssetup-[0-9][0-9]|nstraceaggregator-[0-9][0-9]|syshealthd-[0-9][0-9]|pitboss-[0-9][0-9]/&&!/gz|tar/&&!/bigfoot/{print | \"sort -r| uniq\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.split()
        count_collectorprocesscrashfile = sp.run("awk '/bgpd-[0-9]|httpd-[0-9]|iked-[0-9]|imi-[0-9]|imish-[0-9]|iprep-[0-9]|iprep_tool-[0-9]|isisd-[0-9]|metricscollector-[0-9]|nsaaad-[0-9]|nscopo-[0-9]|nskrb_debug-[0-9]|nsm-[0-9]|ospf6d-[0-9]|ospfd-[0-9]|ripd-[0-9]|ripngd-[0-9]|snmpd-[0-9]|nsaggregatord-[0-9]|nscfsyncd-[0-9]|nscollect-[0-9]|nsconfigd-[0-9]|nsconmsg-[0-9]|nslped-[0-9]|nsnetsvc-[0-9]|nsnewstat-[0-9]|nssetup-[0-9]|nstraceaggregator-[0-9]|syshealthd-[0-9]|pitboss-[0-9]|sshd-[0-9]/&&/-rw------/{print $NF | \"sort -r| uniq -c\"}' shell/ls_lRtrp.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        collectorprocesscrashfile = sp.run("awk '/bgpd-[0-9]|httpd-[0-9]|iked-[0-9]|imi-[0-9]|imish-[0-9]|iprep-[0-9]|iprep_tool-[0-9]|isisd-[0-9]|metricscollector-[0-9]|nsaaad-[0-9]|nscopo-[0-9]|nskrb_debug-[0-9]|nsm-[0-9]|ospf6d-[0-9]|ospfd-[0-9]|ripd-[0-9]|ripngd-[0-9]|snmpd-[0-9]|nsaggregatord-[0-9]|nscfsyncd-[0-9]|nscollect-[0-9]|nsconfigd-[0-9]|nsconmsg-[0-9]|nslped-[0-9]|nsnetsvc-[0-9]|nsnewstat-[0-9]|nssetup-[0-9]|nstraceaggregator-[0-9]|syshealthd-[0-9]|pitboss-[0-9]|sshd-[0-9]/&&/-rw------/{print $NF}' shell/ls_lRtrp.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.split()
        if len(nsppecrashfile) != 0:
            fate_message = "show -bt --> NSPPE crash"; send_request(version, username, url, fate_message, "Success")
            print(style.YELLOW + '{:-^87}'.format('Its a NSPPE Crash'))
            print(style.YELLOW + "\nAvailable NSPPE Core files in Case directory " + style.RESET)
            print(style.CYAN + '\n'.join(nsppecrashfile) + style.RESET)
            if collectornsppecrashfile:
                print(style.YELLOW + "\nAvailable NSPPE Core files in this collector bundle: " + style.RESET)
                print(style.CYAN + '\n'.join(collectornsppecrashfile) + style.RESET)
            else:
                print(style.RED + "\nUnable to find crash / core file in this collector bundle." + style.RESET)
                manual_core = input(style.YELLOW + "\nPlease specify the core file full path for manual analysis: " + style.RESET)
                if len(manual_core) > 5:
                    print(style.GREEN+"\nGenerating BackTrace for: " + manual_core + " --> " + sp.run("what " + manual_core + "| awk '/NetScaler/{print substr($2,3) substr($4,1,length($4)-4)}' | sed 's/:/_/g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout + style.RESET)
                    nsppefw = "nsppe64-"+sp.run("what " + manual_core + " | awk '/Build/{print $2, $4}' | cut -c 3- | sed s/\": \"/-/g | sed s/.nc/_nc/g | rev | cut -c 2- | rev | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    nsppebtout = (sp.run("gdb /home/django/nsppe_symbols/"+nsppefw + " " + manual_core + " -ex 'bt full' -ex quit | awk '/0x[0-9a-z]|symbols from|generated by|terminated with|handler called/{print}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout)
                    print(nsppebtout)
                    rawjira = [e[3:] for e in re.findall( "in\s[a-z_0-9]{3,}", nsppebtout)]
                    JiraFun = (' '.join(rawjira))
                    print(style.UNDERLINE + style.GREEN + "Crashing functions:" + "\n" + style.RESET)
                    print(JiraFun + "\n")
                    initialJira = sp.run("curl -s -H 'Content-type: application/json' -d '{\"feature\":\"search\", \"parameters\": [{\"name\":\"authorization\",\"value\":\"c3ZjYWNjdF9zY2FuYWRtaW46ZG5KMmxxaGg==\"},{\"name\":\"searchstring\",\"value\":\""+JiraFun+"\"}]}' -X POST http://10.14.18.46/SFaaS/api/jira | perl -wnE'say /\"NSHELP-[0-9]{3,9}/g' | sed 's/\"/ /g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    if len(initialJira) > 5:
                        print(style.GREEN + "Matching Jira -->" + style.RESET + initialJira)
                    else:
                        print(style.RED + "Unable to match any Jira with the above crashing funcation !!!" + style.RESET + initialJira)
                    for i in initialJira.split():
                        detailedJira = sp.run("curl -s -H 'Content-type: application/json' -d '{\"name\":\"authorization\",\"value\":\"c3ZjYWNjdF9zY2FuYWRtaW46ZG5KMmxxaGg==\",\"feature\":\"fetchfields\",\"parameters\":[{\"name\":\"id\",\"value\":\""+i+"\",\"isbase64\":false},{\"name\":\"fields\",\"value\":\"summary,versions,status,resolution,fixVersions,created\",\"isbase64\":false}]}' -X POST http://10.14.18.46/SFaaS/api/jira | jq '.options | .[] | .values | .[]' | sed 's/\\\\//g' | awk '{print substr($0, 2, length($0) - 2)}' | jq -r  '\"\\(.key) \\(\"-->\") \\(.fields.summary) \\(\"-->\") \\(.fields.resolution.name) \\(\"-->\") \\(.fields.created[0:10]) \\(\"\\nFound In:\") \\([.fields.versions[].name]) \\(\"--> Fixed In:\") \\([.fields.fixVersions[].name]) \\(\"\\n\")\"'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                        print(detailedJira)
            for nsppecrash in nsppecrashfile:
                nsppecrash = re.sub("\(", "\(", nsppecrash)
                nsppecrash = re.sub("\)", "\)", nsppecrash)
                nsppecrash = re.sub(" ", "\ ", nsppecrash)
                for collectornscrash in collectornsppecrashfile:
                    collectornscrash = re.sub("\(", "\(", collectornscrash)
                    collectornscrash = re.sub("\)", "\)", collectornscrash)
                    collectornscrash = re.sub(" ", "\ ", collectornscrash)
                    collectornscrash = re.sub(".gz", "", collectornscrash)
                    if collectornscrash in nsppecrash:
                        print(style.GREEN+"\nGenerating BackTrace for: " + nsppecrash + " --> " + sp.run("what " + nsppecrash + "| awk '/NetScaler/{print substr($2,3) substr($4,1,length($4)-4)}' | sed 's/:/_/g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout + style.RESET)
                        nsppefw = "nsppe64-"+sp.run("what " + nsppecrash + " | awk '/Build/{print $2, $4}' | cut -c 3- | sed s/\": \"/-/g | sed s/.nc/_nc/g | rev | cut -c 2- | rev | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                        nsppebtout = (sp.run("gdb /home/django/nsppe_symbols/"+nsppefw + " " + nsppecrash + " -ex 'bt full' -ex quit | awk '/0x[0-9a-z]|symbols from|generated by|terminated with|handler called/{print}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout)
                        print(nsppebtout)
                        rawjira = [e[3:] for e in re.findall("in\s[a-z_0-9]{3,}", nsppebtout)]
                        JiraFun = (' '.join(rawjira))
                        print(style.GREEN + "Crashing functions:" + "\n" + style.RESET)
                        print(JiraFun + "\n")
                        initialJira = sp.run("curl -s -H 'Content-type: application/json' -d '{\"feature\":\"search\", \"parameters\": [{\"name\":\"authorization\",\"value\":\"c3ZjYWNjdF9zY2FuYWRtaW46ZG5KMmxxaGg==\"},{\"name\":\"searchstring\",\"value\":\""+JiraFun+"\"}]}' -X POST http://10.14.18.46/SFaaS/api/jira | perl -wnE'say /\"NSHELP-[0-9]{3,9}/g' | sed 's/\"/ /g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                        if len(initialJira) > 5:
                            print(style.GREEN + "Matching Jira -->" + style.RESET + initialJira)
                        else:
                            print(style.RED + "Unable to match any Jira with the above crashing function !!!" + style.RESET + initialJira)
                        for i in initialJira.split():
                            detailedJira = sp.run("curl -s -H 'Content-type: application/json' -d '{\"name\":\"authorization\",\"value\":\"c3ZjYWNjdF9zY2FuYWRtaW46ZG5KMmxxaGg==\",\"feature\":\"fetchfields\",\"parameters\":[{\"name\":\"id\",\"value\":\""+i+"\",\"isbase64\":false},{\"name\":\"fields\",\"value\":\"summary,versions,status,resolution,fixVersions,created\",\"isbase64\":false}]}' -X POST http://10.14.18.46/SFaaS/api/jira | jq '.options | .[] | .values | .[]' | sed 's/\\\\//g' | awk '{print substr($0, 2, length($0) - 2)}' | jq -r  '\"\\(.key) \\(\"-->\") \\(.fields.summary) \\(\"-->\") \\(.fields.resolution.name) \\(\"-->\") \\(.fields.created[0:10]) \\(\"\\nFound In:\") \\([.fields.versions[].name]) \\(\"--> Fixed In:\") \\([.fields.fixVersions[].name]) \\(\"\\n\")\"'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                            print(detailedJira)

        elif len(processcrashfile) != 0:
            print(style.YELLOW + '{:-^87}'.format('Its a Process Crash') + style.RESET)
            print(style.YELLOW + "\nAvailable Process Core files in Case directory " + style.RESET)
            print(style.CYAN + '\n'.join(processcrashfile) + style.RESET)
            print(style.YELLOW + "\nAvailable Process Core files in this collector bundle: " + style.RESET)
            print(style.CYAN + count_collectorprocesscrashfile + style.RESET)
            print("Downloading and Using Debug files " + codebuild)
            manaq = ("curl -Iks https://sjc-repo.citrite.net/list/nwa-virtual-netscaler-build/builds_ns/builds_mana/build_mana_" + codebuild.split("-")[1].split("_")[0].replace(".", "_")+"/dbgbins-"+codebuild + " | awk '/HTTP/{print $2}'")
            artesaq = ("curl -Iks https://sjc-repo.citrite.net/list/nwa-virtual-netscaler-build/builds_ns/builds_artesa/build_artesa_" + codebuild.split("-")[1].split("_")[0].replace(".", "_")+"/dbgbins-"+codebuild + " | awk '/HTTP/{print $2}'")
            mana = ("curl -Ok https://sjc-repo.citrite.net/list/nwa-virtual-netscaler-build/builds_ns/builds_mana/build_mana_" + codebuild.split("-")[1].split("_")[0].replace(".", "_")+"/dbgbins-"+codebuild)
            artesa = ("curl -Ok https://sjc-repo.citrite.net/list/nwa-virtual-netscaler-build/builds_ns/builds_artesa/build_artesa_" + codebuild.split("-")[1].split("_")[0].replace(".", "_")+"/dbgbins-"+codebuild)
            if "200" in sp.run(manaq, shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout:
                try:
                    fate_message = "show -bt --> mana process crash"; send_request(version, username, url, fate_message, "Success")
                finally:
                    pass
                sp.run(mana, shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                print("Extracting " + codebuild)
                sp.run("tar -xf dbgbins*", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                sp.run("rm -rf dbgbins*.tgz", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                sp.run("fixperms ./", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                collectorprocesscrashfile = set(collectorprocesscrashfile)
                for processcrash in processcrashfile:
                    processcrash = re.sub("\(", "\(", processcrash)
                    processcrash = re.sub("\)", "\)", processcrash)
                    for collectorprocesscrash in collectorprocesscrashfile:
                        collectorprocesscrash = re.sub("\(", "\(", collectorprocesscrash)
                        collectorprocesscrash = re.sub("\)", "\)", collectorprocesscrash)
                        collectorprocesscrash = re.sub(".gz", "", collectorprocesscrash)
                        if collectorprocesscrash in processcrash:
                            print(style.GREEN+"\nGenerating BackTrace for: " + processcrash + style.RESET)
                            if os.path.isfile("dbgbins-" + codebuild[:-4] + "/" + processcrash.split("-")[0].split("/")[-1]):
                                os.chdir("dbgbins-" + codebuild[:-4])
                                btout = sp.run("gdb i386/" + processcrash.split("-")[0].split("/")[-1] + " " + processcrash + " -ex 'bt full' -ex quit", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                                print(btout.stdout)
                                os.chdir("..")
                            elif os.path.isfile("dbgbins-" + codebuild[:-4] + "/" + "i386/"+processcrash.split("-")[0].split("/")[-1]):
                                os.chdir("dbgbins-" + codebuild[:-4])
                                btout = sp.run("gdb i386/" + processcrash.split("-")[0].split("/")[-1] + " " + processcrash + " -ex 'bt full' -ex quit", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                                print(btout.stdout)
                                os.chdir("..")
                            elif os.path.isfile("dbgbins-" + codebuild[:-4] + "/" + "amd64/" + processcrash.split("-")[0].split("/")[-1]):
                                os.chdir("dbgbins-" + codebuild[:-4])
                                btout = sp.run("gdb amd64/" + processcrash.split("-")[0].split("/")[-1] + " " + processcrash + " -ex 'bt full' -ex quit", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                                print(btout.stdout)
                                sp.run("rm -rf dbgbins*", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                                os.chdir("..")
                            else:
                                print(style.RED + "Unable to find this process: " + processcrash.split("-")[0].split("/")[-1] + " in debug binaries" + style.RESET)
                                sp.run("rm -rf dbgbins*", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                                quit()
            elif "200" in sp.run(artesaq, shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout:
                try:
                    fate_message = "show -bt --> artesa process crash"; send_request(version, username, url, fate_message, "Success")
                finally:
                    pass
                sp.run(artesa, shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                print("Extracting " + codebuild)
                sp.run("tar -xf dbgbins*", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                sp.run("rm -rf dbgbins*.tgz", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                sp.run("fixperms ./", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                collectorprocesscrashfile = set(collectorprocesscrashfile)
                for processcrash in processcrashfile:
                    processcrash = re.sub("\(", "\(", processcrash)
                    processcrash = re.sub("\)", "\)", processcrash)
                    for collectorprocesscrash in collectorprocesscrashfile:
                        collectorprocesscrash = re.sub("\(", "\(", collectorprocesscrash)
                        collectorprocesscrash = re.sub("\)", "\)", collectorprocesscrash)
                        collectorprocesscrash = re.sub(".gz", "", collectorprocesscrash)
                        if collectorprocesscrash in processcrash:
                            print(style.GREEN+"\nGenerating BackTrace for: " + processcrash + style.RESET)
                            if os.path.isfile("dbgbins-" + codebuild[:-4] + "/" + processcrash.split("-")[0].split("/")[-1]):
                                os.chdir("dbgbins-" + codebuild[:-4])
                                btout = sp.run("gdb i386/" + processcrash.split("-")[0].split("/")[-1] + " " + processcrash + " -ex 'bt full' -ex quit", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                                print(btout.stdout)
                                os.chdir("..")
                            elif os.path.isfile("dbgbins-" + codebuild[:-4] + "/" + "i386/"+processcrash.split("-")[0].split("/")[-1]):
                                os.chdir("dbgbins-" + codebuild[:-4])
                                btout = sp.run("gdb i386/" + processcrash.split("-")[0].split("/")[-1] + " " + processcrash + " -ex 'bt full' -ex quit", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                                print(btout.stdout)
                                os.chdir("..")
                            elif os.path.isfile("dbgbins-" + codebuild[:-4] + "/" + "amd64/" + processcrash.split("-")[0].split("/")[-1]):
                                os.chdir("dbgbins-" + codebuild[:-4])
                                btout = sp.run("gdb amd64/" + processcrash.split("-")[0].split("/")[-1] + " " + processcrash + " -ex 'bt full' -ex quit", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                                print(btout.stdout)
                                sp.run("rm -rf dbgbins*", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                                os.chdir("..")
                            else:
                                print(style.RED + "Unable to find this process: " + processcrash.split("-")[0].split("/")[-1] + " in debug binaries" + style.RESET)
                                sp.run("rm -rf dbgbins*", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                                quit()
        else:
            print(style.RED + "Unable to find Process / NSPPE Crash in Either Collector Bundle or No Core File in Case Directory !!!" + style.RESET)
            try:
                fate_message = "show -bt"; send_request(version, username, url, fate_message, "Failed")
            finally:
                pass
    finally:
        quit()
elif args.bt1:
    try:
        try:
            fate_message = "show -bt1 --> NSPPE crash"; send_request(version, username, url, fate_message, "Success")
        finally:
            pass
        manual_core = input(style.YELLOW + "\nPlease specify the core file full path for manual analysis: " + style.RESET)
        if len(manual_core) > 5:
            print(style.GREEN+"\nGenerating BackTrace for: " + manual_core + " --> " + sp.run("what " + manual_core + "| awk '/NetScaler/{print substr($2,3) substr($4,1,length($4)-4)}' | sed 's/:/_/g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout + style.RESET)
            nsppefw = "nsppe64-"+sp.run("what " + manual_core + " | awk '/Build/{print $2, $4}' | cut -c 3- | sed s/\": \"/-/g | sed s/.nc/_nc/g | rev | cut -c 2- | rev | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
            nsppebtout = (sp.run("gdb /home/django/nsppe_symbols/"+nsppefw + " " + manual_core + " -ex 'bt full' -ex quit | awk '/0x[0-9a-z]|symbols from|generated by|terminated with|handler called/{print}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout)
            print(nsppebtout)
            rawjira = [e[3:] for e in re.findall("in\s[a-z_0-9]{3,}", nsppebtout)]
            JiraFun = (' '.join(rawjira))
            print(style.UNDERLINE + style.GREEN + "Crashing functions:" + "\n" + style.RESET)
            print(JiraFun + "\n")
            initialJira = sp.run("curl -s -H 'Content-type: application/json' -d '{\"feature\":\"search\", \"parameters\": [{\"name\":\"authorization\",\"value\":\"c3ZjYWNjdF9zY2FuYWRtaW46ZG5KMmxxaGg==\"},{\"name\":\"searchstring\",\"value\":\""+JiraFun+"\"}]}' -X POST http://10.14.18.46/SFaaS/api/jira | perl -wnE'say /\"NSHELP-[0-9]{3,9}/g' | sed 's/\"/ /g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
            if len(initialJira) > 5:
                print(style.GREEN + "Matching Jira -->" + style.RESET + initialJira)
            else:
                print(style.RED + "Unable to match any Jira with the above crashing funcation !!!" + style.RESET + initialJira)
            for i in initialJira.split():
                detailedJira = sp.run("curl -s -H 'Content-type: application/json' -d '{\"name\":\"authorization\",\"value\":\"c3ZjYWNjdF9zY2FuYWRtaW46ZG5KMmxxaGg==\",\"feature\":\"fetchfields\",\"parameters\":[{\"name\":\"id\",\"value\":\""+i+"\",\"isbase64\":false},{\"name\":\"fields\",\"value\":\"summary,versions,status,resolution,fixVersions,created\",\"isbase64\":false}]}' -X POST http://10.14.18.46/SFaaS/api/jira | jq '.options | .[] | .values | .[]' | sed 's/\\\\//g' | awk '{print substr($0, 2, length($0) - 2)}' | jq -r  '\"\\(.key) \\(\"-->\") \\(.fields.summary) \\(\"-->\") \\(.fields.resolution.name) \\(\"-->\") \\(.fields.created[0:10]) \\(\"\\nFound In:\") \\([.fields.versions[].name]) \\(\"--> Fixed In:\") \\([.fields.fixVersions[].name]) \\(\"\\n\")\"'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                print(detailedJira)
    finally:
        pass
elif args.author:
    logger.info(os.getcwd() + " - author")
    print(sp.run(["lolcat"], input=showscriptauthor, capture_output=True, text=True).stdout)
    try:
        fate_message = "show --author"; send_request(version, username, url, fate_message, "Success")
    finally:
        pass
elif args.about:
    logger.info(os.getcwd() + " - about")
    print(sp.run(["lolcat"], input=showscriptabout, capture_output=True, text=True).stdout)
    try:
        fate_message = "show --about"; send_request(version, username, url, fate_message, "Success")
    finally:
        pass
elif args.G:
    try:
        adchostname = sp.run("awk '{printf $2}' shell/uname-a.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        collector_bundle_name = re.findall('collector.*[0-9]{1,2}', sp.run("pwd", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout)[0]
    finally:
        pass
    try:
        path = "conFetch"
        isExist = os.path.exists(path)
        if not isExist:
            os.popen("fixperms $PWD").read()
            os.makedirs(path)
        else:
            pass
        if "cpu" in args.G:
            try:
                for newnslog_file in glob('var/nslog/newnslo*[!z]'):
                    time_range = sp.run(
                        "nsconmsg -K "+newnslog_file+" -d setime | awk '!/Displaying|NetScaler|size|duration/{$1=$2=\"\"; printf \" --%s\", $0}' | sed -r 's/^.{9}//'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    mgmt_cpu_use = sp.run(
                        "nsconmsg -K "+newnslog_file+" -d current -s disptime=1 -g mgmt_cpu | awk '/mgmt_cpu/&&/use/{print $8\"-\"$9\",\"$11\"-\"$10, $3/10, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                    master_cpu_use = sp.run(
                        "nsconmsg -K "+newnslog_file+" -d current -s disptime=1 -g master_cpu | awk '/master_cpu/{print $8\"-\"$9\",\"$11\"-\"$10, $3/10, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                    cc_cpu_use = sp.run(
                        "nsconmsg -K "+newnslog_file+" -d current -s disptime=1 -g cc_cpu | awk '/cc_cpu/{print $9\"-\"$10\",\"$12\"-\"$11, $3/10, $7}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                    if len(mgmt_cpu_use.stdout) < 52:
                        mgmt_cpu_use.stdout = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');"
                    if len(master_cpu_use.stdout) < 52:
                        master_cpu_use.stdout = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');"
                    if len(cc_cpu_use.stdout) < 52:
                        cc_cpu_use.stdout = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');"
                    else:
                        cc_cpu_use.stdout = re.sub('.*,\s,.*', '', cc_cpu_use.stdout)
                        cc_cpu_use.stdout = re.sub('.*,\s\].*', '', cc_cpu_use.stdout)
                        cc_cpu_use.stdout = cc_cpu_use.stdout.replace("\n", "")
                    if True:
                        file = open(path+"/"+newnslog_file.split("/")
                                    [2]+"_cpu_Usage.html", "w")
                        file.write('''<html><head> <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script> <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.js"></script> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.css"> <script type="text/javascript">google.charts.load('current',{'packages': ['annotationchart']}); google.charts.setOnLoadCallback(mgmt_cpu_use);google.charts.setOnLoadCallback(master_cpu_use); google.charts.setOnLoadCallback(cc_cpu_use);function mgmt_cpu_use(){var data=new google.visualization.DataTable(); '''+mgmt_cpu_use.stdout + ''' var chart=new google.visualization.AnnotationChart(document.getElementById('mgmt_cpu')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}function master_cpu_use(){var data=new google.visualization.DataTable(); '''+master_cpu_use.stdout +
                                   ''' var chart=new google.visualization.AnnotationChart(document.getElementById('master_cpu')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}function cc_cpu_use(){var data=new google.visualization.DataTable(); '''+cc_cpu_use.stdout + ''' var chart=new google.visualization.AnnotationChart(document.getElementById('cc_cpu')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}</script></head><body> <h1 class="txt-primary">CPU Graph</h1> <hr> <p class="txt-title">Collector_Bundle_Name: '''+collector_bundle_name+'''<br>Device_Name: '''+adchostname+'''<br>Log_file: '''+newnslog_file.split("/")[2]+'''<br>Log_Timestamp: '''+time_range+'''</p><hr><div style="width: 100%"><p class="txt-primary">mgmt_cpu_use</p><div id="mgmt_cpu" style="height:450px"></div><hr><p class="txt-primary">master_cpu_use</p><div id="master_cpu" style="height:450px"></div><hr><p class="txt-primary">cc_cpu_use</p><div id="cc_cpu" style="height:450px"></div></div><div class="footer">Project conFetch</div></body></html>''')
                        file.close()
                        print("Processed "+newnslog_file)
            finally:
                os.popen("fixperms ./conFetch").read()
                try:
                    fate_message = "show -G " + ''.join(args.G); send_request(version, username, url, fate_message, "Success")
                finally:
                    pass
        elif "ha" in args.G:
            try:
                for newnslog_file in glob('var/nslog/newnslo*[!z]'):
                    time_range = sp.run(
                        "nsconmsg -K "+newnslog_file+" -d setime | awk '!/Displaying|NetScaler|size|duration/{$1=$2=\"\"; printf \" --%s\", $0}' | sed -r 's/^.{9}//'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    ha_tot_pkt_rx_tx = sp.run(
                        "nsconmsg -K "+newnslog_file+" -d current -s disptime=1 -g ha_tot_pkt_rx -g ha_tot_pkt_tx  |awk '/ha_tot/{print $8\"-\"$9\",\"$11\"-\"$10, $4, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                    ha_err_heartbeat = sp.run(
                        "nsconmsg -K "+newnslog_file+" -d current -s disptime=1 -g ha_err_heartbeat | awk '/ha_err_heartbeat/{print $8\"-\"$9\",\"$11\"-\"$10, $4, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                    ha_tot_macresolve_requests = sp.run(
                        "nsconmsg -K "+newnslog_file+" -d current -s disptime=1 -g ha_tot_macresolve_requests | awk '/ha_tot_macresolve_requests/{print $8\"-\"$9\",\"$11\"-\"$10, $4, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                    if len(ha_tot_pkt_rx_tx.stdout) < 52:
                        ha_tot_pkt_rx_tx.stdout = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');"
                    if len(ha_tot_macresolve_requests.stdout) < 52:
                        ha_tot_macresolve_requests.stdout = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');"
                    if len(ha_err_heartbeat.stdout) < 52:
                        ha_err_heartbeat.stdout = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');"
                    if True:
                        file = open(path+"/"+newnslog_file.split("/")
                                    [2]+"_HA.html", "w")
                        file.write('''<html><head> <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script> <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.js"></script> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.css"> <script type="text/javascript">google.charts.load('current',{'packages': ['annotationchart']}); google.charts.setOnLoadCallback(ha_tot_pkt_rx_tx); google.charts.setOnLoadCallback(ha_err_heartbeat); google.charts.setOnLoadCallback(ha_tot_macresolve_requests); function ha_tot_pkt_rx_tx(){var data=new google.visualization.DataTable();'''+ha_tot_pkt_rx_tx.stdout + ''' var chart=new google.visualization.AnnotationChart(document.getElementById('ha_tot_pkt_rx_tx')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}function ha_err_heartbeat(){var data=new google.visualization.DataTable();'''+ha_err_heartbeat.stdout +
                                   ''' var chart=new google.visualization.AnnotationChart(document.getElementById('ha_err_heartbeat')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}function ha_tot_macresolve_requests(){var data=new google.visualization.DataTable();'''+ha_tot_macresolve_requests.stdout + ''' var chart=new google.visualization.AnnotationChart(document.getElementById('ha_tot_macresolve_requests')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}</script></head><body> <h1 class="txt-primary">High Availability Graph</h1> <hr> <p class="txt-title">Collector_Bundle_Name: '''+collector_bundle_name+'''<br>Device_Name: '''+adchostname+'''<br>Log_file: '''+newnslog_file.split("/")[2]+'''<br>Log_Timestamp: '''+time_range+'''</p><hr> <div style="width: 100%"><p class="txt-primary">ha_tot_pkt_rx_tx</p><div id="ha_tot_pkt_rx_tx" style="height:450px"></div></div><div style="width: 100%"><p class="txt-primary">ha_err_heartbeat</p><div id="ha_err_heartbeat" style="height:450px"></div></div><div style="width: 100%"><p class="txt-primary">ha_tot_macresolve_requests</p><div id="ha_tot_macresolve_requests" style="height:450px"></div></div><div class="footer">Project conFetch</div></body></html>''')
                        file.close()
                        print("Processed "+newnslog_file)
            finally:
                os.popen("fixperms ./conFetch").read()
                try:
                    fate_message = "show -G " + ''.join(args.G); send_request(version, username, url, fate_message, "Success")
                finally:
                    pass
        elif "mem" in args.G:
            try:
                for newnslog_file in glob('var/nslog/newnslo*[!z]'):
                    time_range = sp.run(
                        "nsconmsg -K "+newnslog_file+" -d setime | awk '!/Displaying|NetScaler|size|duration/{$1=$2=\"\"; printf \" --%s\", $0}' | sed -r 's/^.{9}//'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    mem_cur_usedsize_freesize_avail = sp.run("nsconmsg -K "+newnslog_file+" -d current -s disptime=1 -g mem_tot_avail -g mem_cur_usedsize -g mem_cur_freesize | awk '!/actual/&&/mem_cur/||/tot_available/{print $8\"-\"$9\",\"$11\"-\"$10, $3/1000000, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | grep -v PART", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                    if len(mem_cur_usedsize_freesize_avail.stdout) < 52:
                        mem_cur_usedsize_freesize_avail.stdout = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');"
                    else:
                        mem_cur_usedsize_freesize_avail.stdout = re.sub('.*,\s,.*', '', mem_cur_usedsize_freesize_avail.stdout)
                        mem_cur_usedsize_freesize_avail.stdout = re.sub('.*,\s\].*', '', mem_cur_usedsize_freesize_avail.stdout)
                        mem_cur_usedsize_freesize_avail.stdout = mem_cur_usedsize_freesize_avail.stdout.replace("\n", "")
                    if True:
                        file = open(path+"/"+newnslog_file.split("/")[2]+"_memory.html", "w")
                        file.write('''<html><head> <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script> <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.js"></script> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.css"> <script type="text/javascript">google.charts.load('current',{'packages': ['annotationchart']}); google.charts.setOnLoadCallback(mem_free_used_avail); function mem_free_used_avail(){var data=new google.visualization.DataTable();'''+mem_cur_usedsize_freesize_avail.stdout +
                                   ''' var chart=new google.visualization.AnnotationChart(document.getElementById('mem_free_used_avail')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}</script></head><body> <h1 class="txt-primary">Memory Graph</h1> <hr> <p class="txt-title">Collector_Bundle_Name: '''+collector_bundle_name+'''<br>Device_Name: '''+adchostname+'''<br>Log_file: '''+newnslog_file.split("/")[2]+'''<br>Log_Timestamp: '''+time_range+'''</p><hr> <div style="width: 100%"><p class="txt-primary">mem_cur_freesize - mem_cur_usedsize - mem_tot_available</p><div id="mem_free_used_avail" style="height:450px"></div></div><div class="footer">Project conFetch</div></body></html>''')
                        file.close()
                        print("Processed "+newnslog_file)
            finally:
                os.popen("fixperms ./conFetch").read()
                try:
                    fate_message = "show -G " + ''.join(args.G); send_request(version, username, url, fate_message, "Success")
                finally:
                    pass
        elif "nic" in args.G:
            try:
                for newnslog_file in glob('var/nslog/newnslo*[!z]'):
                    time_range = sp.run("nsconmsg -K "+newnslog_file+" -d setime | awk '!/Displaying|NetScaler|size|duration/{$1=$2=\"\"; printf \" --%s\", $0}' | sed -r 's/^.{9}//'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    allnic_tot_rx_tx_mbits = sp.run("nsconmsg -K "+newnslog_file+" -s disptime=1 -d current -g allnic | awk '/allnic_tot_rx_mbits/||/allnic_tot_tx_mbits/{print $8\"-\"$9\",\"$11\"-\"$10, $5, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                    if len(allnic_tot_rx_tx_mbits.stdout) < 52:
                        allnic_tot_rx_tx_mbits.stdout = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');"
                    if True:
                        allnic_tot_rx_tx_mbits.stdout = re.sub('data.addRow\(\[new\s.{10,60}(,\s){1,30}\]\);', '', allnic_tot_rx_tx_mbits.stdout)
                        file = open(path+"/"+newnslog_file.split("/")
                                    [2]+"_nic.html", "w")
                        file.write('''<html><head> <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script> <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.js"></script> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.css"> <script type="text/javascript">google.charts.load('current',{'packages': ['annotationchart']}); google.charts.setOnLoadCallback(allnic_tot_rx_tx_mbits); function allnic_tot_rx_tx_mbits(){var data=new google.visualization.DataTable();'''+allnic_tot_rx_tx_mbits.stdout +
                                   ''' var chart=new google.visualization.AnnotationChart(document.getElementById('allnic_tot_rx_tx_mbits')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}</script></head><body> <h1 class="txt-primary">NIC Graph</h1> <hr> <p class="txt-title">Collector_Bundle_Name: '''+collector_bundle_name+'''<br>Device_Name: '''+adchostname+'''<br>Log_file: '''+newnslog_file.split("/")[2]+'''<br>Log_Timestamp: '''+time_range+'''</p><hr> <div style="width: 100%"><p class="txt-primary">allnic_tot_rx_mbits - allnic_tot_tx_mbits</p><div id="allnic_tot_rx_tx_mbits" style="height:450px"></div></div><div class="footer">Project conFetch</div></body></html>''')
                        file.close()
                        print("Processed "+newnslog_file)
            finally:
                os.popen("fixperms ./conFetch").read()
                try:
                    fate_message = "show -G " + ''.join(args.G); send_request(version, username, url, fate_message, "Success")
                finally:
                    pass
    finally:
        pass
elif args.ha:
    try:
        if os.path.isfile("conFetch/show_output/show_ha.txt") and os.path.getsize("conFetch/show_output/show_ha.txt") > 23:
            with open("conFetch/show_output/show_ha.txt", "r") as show_ha:
                print(show_ha.read())
                try:
                    fate_message = "show -ha pre-data"; send_request(version, username, url, fate_message, "Success")
                finally:
                    quit()
        else:
            try:
                tz_convert_msg_printed = False
                rca_msg_printed = False
                ha_transition_timestamp = []
                timestamp_pattern = r'\b([A-Za-z]{3} \d{1,2} \d{2}:\d{2}:\d{2})\b'
                print(style.YELLOW + '{:-^87}'.format('NetScaler HA Analysis') + "\n" + style.RESET)
                ha_state = sp.run("sed -n -e \"/show ns version/I,/Done/p\" shell/showcmds.txt | grep Node | awk '{print $2}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                print("Currently this Node is: " + style.GREEN + ha_state + style.RESET + "\n")
                if "Standalone" in ha_state:
                    print(style.RED + "Since this is a Standalone node, unable to proceed further !!!" + style.RESET + "\n")
                    try:
                        fate_message = "show -ha Standalone"; send_request(version, username, url, fate_message, "Success")
                    finally:
                        quit()
                else:
                    box_time = int(sp.run("awk '/local/&&/GMT/{print $3 - substr($6,12); exit}' var/log/ns.lo*", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip())
                    box_timezone = sp.run("awk '{printf \"[%s]\", $5}' shell/date.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                    ha_initial_state = sp.run("i=$(ls -alh var/nslog/ | awk '/newnslog./{print \"var/nslog/\"$NF}' | sort | head -1); nsconmsg -d stats -g ha_cur_master_state -K $i |  awk -v i=\"$i\" '/ha_cur_master_state/{if ($3 == 0) print i \" --> Initial State --> \\033[;32mSecondary\\033[0m\"; else if ($3 == 1) print i \" --> Initial State  --> \\033[;32mClaiming To Primary\\033[0m\"; else if ($3 == 2) print i \" --> Initial State  --> \\033[;32mPrimary\\033[0m\"; else if ($3 == 3) print i \" --> Initial State  --> \\033[;32mStay Secondary\\033[0m\"; else if ($3 == 4) print i \" --> Initial State  --> \\033[;32mForce Change to Primary\\033[0m\"; else print i \" --> Initial State  --> \\033[;32mInvalid\\033[0m\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                    ha_transition = sp.run(" for i in $(printf \"%s\\n\" \"var/nslog/newnslog.*\" | grep -v gz | grep -v tar && printf \"var/nslog/newnslog\\n\"); do nsconmsg -d current -s disptime=1 -g ha_cur_master_state -K $i | awk -v i=\"$i\" '/ha_cur_master_state/{if ($3 == 0) print i \" --> Secondary --> \\033[;31mFailed Over Time\\033[0m --> \", $7, $8, $9, $10, $11; else if ($3 == 1) print i \" --> Claiming To Primary --> \\033[;31mFailed Over Time\\033[0m --> \", $7, $8, $9, $10, $11; else if ($3 == 2) print i \" --> Primary --> \\033[;31mFailed Over Time\\033[0m --> \", $7, $8, $9, $10, $11; else if ($3 == 3) print i \" --> Stay Secondary --> \\033[;31mFailed Over Time\\033[0m --> \", $7, $8, $9, $10, $11; else if ($3 == 4) print i \" --> Force Change to Primary --> \\033[;31mFailed Over Time\\033[0m --> \", $7, $8, $9, $10, $11; else print i \" --> Invalid --> \\033[;31mFailed Over Time\\033[0m --> \", $7, $8, $9, $10, $11}'; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.strip()
                    if box_time == 0:
                        print(ha_initial_state + "\n")
                        if len(ha_transition) < 23:
                            print(style.GREEN + "NetScaler did not failover" + style.RESET + "\n")
                        else:
                            print(style.YELLOW + "NetScaler Time is already in GMT Time" + style.RESET + "\n")
                            print(ha_transition + "\n")
                            ha_transition_timestamp = re.findall(timestamp_pattern, ha_transition)
                            try:
                                fate_message = "show -ha Analysis"; send_request(version, username, url, fate_message, "Success")
                            finally:
                                pass
                    else:
                        ha_transition_string = "'''"+ha_transition+"'''"
                        ha_transition_timeconvert = ha_transition_string.split('\n')
                        print(ha_initial_state + "\n")
                        for line in ha_transition_timeconvert:
                            match = re.search(r'(\w{3} \w{3} \d{1,2} \d{2}:\d{2}:\d{2} \d{4})', line)
                            if match:
                                timestamp = datetime.strptime(match.group(), '%a %b %d %H:%M:%S %Y')
                                new_timestamp = timestamp + timedelta(hours=box_time)
                                line = line + " [GMT] --> " + new_timestamp.strftime("%a %b %d %H:%M:%S %Y") + " " + box_timezone
                            if len(line) < 23:
                                print(style.GREEN + "NetScaler did not failover" + style.RESET + "\n")
                            else:
                                if not tz_convert_msg_printed:
                                    print(style.GREEN + "Converted from GMT time to NetScaler Time " + box_timezone + " Offset: " + str(box_time) + style.RESET + "\n")
                                    tz_convert_msg_printed = True
                                else:
                                    print(line.replace("'''", ""))
                                    ha_transition_timestamp = re.findall(timestamp_pattern, line)
                        try:
                            fate_message = "show -ha Analysis"; send_request(version, username, url, fate_message, "Success")
                        finally:
                            pass
            finally:
                try:
                    print(style.YELLOW +'{:-^87}'.format('NetScaler HA Root Cause') + "\n" + style.RESET)
                    manual_failover = sp.run("for file in var/log/*; do awk '/CMD_EXECUTED/&&/force HA failover -force/{print}' \"$file\"; done | sort | uniq", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    for line in manual_failover.split('\n'):
                        if not line.strip():
                            continue
                        timestamp = line.split()[0:3]
                        timestamp_str = ' '.join(timestamp)
                        for ts in ha_transition_timestamp:
                            ts_dt = datetime.strptime(ts, '%b %d %H:%M:%S')
                            line_ts_dt = datetime.strptime(timestamp_str, '%b %d %H:%M:%S')
                            diff = line_ts_dt - ts_dt
                            if abs(diff.total_seconds()) < 300:
                                if not rca_msg_printed:
                                    print(style.YELLOW + "\nPossible Manual Failover at the time of " + ts + style.RESET)
                                    rca_msg_printed = True
                                print(line)
                                break
                    forced = sp.run("for file in var/log/*; do awk '/STATECHANGE/&&/forcibly becoming Primary/||/State Primary/{print}' \"$file\"; done | sort | uniq", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    rca_msg_printed = False
                    for line in forced.split('\n'):
                        if not line.strip():
                            continue
                        timestamp = line.split()[0:3]
                        timestamp_str = ' '.join(timestamp)
                        for ts in ha_transition_timestamp:
                            ts_dt = datetime.strptime(ts, '%b %d %H:%M:%S')
                            line_ts_dt = datetime.strptime(
                                timestamp_str, '%b %d %H:%M:%S')
                            diff = line_ts_dt - ts_dt
                            if abs(diff.total_seconds()) < 300:
                                if not rca_msg_printed:
                                    print(style.YELLOW + "\nPossible Force Failover at the time of " + ts + style.RESET)
                                    rca_msg_printed = True
                                print(line)
                                break
                    nsppe_crash = sp.run("for file in var/log/*; do awk '(/got signal/&&/nsppe/)||(/NSPPE-/&&/died due to/)||(/NSPPE-/&&/core dumped/){print}' \"$file\"; done | sort | uniq", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    rca_msg_printed = False
                    for line in nsppe_crash.split('\n'):
                        if not line.strip():
                            continue
                        timestamp = line.split()[0:3]
                        timestamp_str = ' '.join(timestamp)
                        for ts in ha_transition_timestamp:
                            ts_dt = datetime.strptime(ts, '%b %d %H:%M:%S')
                            line_ts_dt = datetime.strptime(timestamp_str, '%b %d %H:%M:%S')
                            diff = line_ts_dt - ts_dt
                            if abs(diff.total_seconds()) < 300:
                                if not rca_msg_printed:
                                    print(style.YELLOW + "Possible Force Failover at the time of " + ts + style.RESET)
                                    rca_msg_printed = True
                                print(line)
                                break
                    ha_heartbeat = sp.run("for file in var/log/*; do awk '/haNoHeartbeats|HA Version Mismatch|haVersionMismatch|InitDueToRequestFrom HA peer node|haNicsMonitorFailed|haBadSecState/{print}' \"$file\"; done | sort | uniq", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    rca_msg_printed = False
                    for line in ha_heartbeat.split('\n'):
                        if not line.strip():
                            continue
                        timestamp = line.split()[0:3]
                        timestamp_str = ' '.join(timestamp)
                        for ts in ha_transition_timestamp:
                            ts_dt = datetime.strptime(ts, '%b %d %H:%M:%S')
                            line_ts_dt = datetime.strptime(
                                timestamp_str, '%b %d %H:%M:%S')
                            diff = line_ts_dt - ts_dt
                            if abs(diff.total_seconds()) < 300:
                                if not rca_msg_printed:
                                    print(style.YELLOW + "\nPossible Force Failover at the time of " + ts + style.RESET)
                                    rca_msg_printed = True
                                print(line)
                                break
                finally:
                    pass
    finally:
        pass
elif args.g:
    try:
        adchostname = sp.run("awk '{printf $2}' shell/uname-a.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        collector_bundle_name = sp.run("pwd", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.split("/")[4]
        if args.s:
            starttime = args.s[0]
        else:
            starttime = '.'
        if args.e:
            endtime = args.e[0]
        else:
            endtime = '.'
    finally:
        if args.K:
            newnslogFile = args.K[0]
        else:
            print(style.RED + "Please use -K <newnslog>" + style.RESET)
            quit()
    try:
        path = "conFetch"
        isExist = os.path.exists(path)
        if not isExist:
            os.popen("fixperms $PWD").read()
            os.makedirs(path)
        else:
            pass
        if "cpu" in args.g:
            try:
                time_range = sp.run(
                    "nsconmsg -K "+"var/nslog/"+newnslogFile+" -d setime | awk '!/Displaying|NetScaler|size|duration/{$1=$2=\"\"; printf \" --%s\", $0}' | sed -r 's/^.{9}//'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                mgmt_cpu_use = sp.run(
                    "nsconmsg -K "+"var/nslog/"+newnslogFile+" -d current -s disptime=1 -g mgmt_cpu | awk '/mgmt_cpu/&&/use/{print $8\"-\"$9\",\"$11\"-\"$10, $3/10, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                master_cpu_use = sp.run(
                    "nsconmsg -K "+"var/nslog/"+newnslogFile+" -d current -s disptime=1 -g master_cpu | awk '/master_cpu/{print $8\"-\"$9\",\"$11\"-\"$10, $3/10, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                cc_cpu_use = sp.run(
                    "nsconmsg -K "+"var/nslog/"+newnslogFile+" -d current -s disptime=1 -g cc_cpu | awk '/cc_cpu/{print $9\"-\"$10\",\"$12\"-\"$11, $3/10, $7}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                if len(mgmt_cpu_use.stdout) < 52:
                    mgmt_cpu_use = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');,['', ]"
                else:
                    mgmt_cpu_use.stdout = re.findall('data.addColumn.{0,52}\);|data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s' +
                                                     starttime+'..*data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s'+endtime+'..{2,16}\);', mgmt_cpu_use.stdout)
                    mgmt_cpu_use = ''.join(mgmt_cpu_use.stdout)
                if len(master_cpu_use.stdout) < 52:
                    master_cpu_use = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');,['', ]"
                else:
                    master_cpu_use.stdout = re.findall('data.addColumn.{0,52}\);|data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s' +
                                                       starttime+'..*data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s'+endtime+'..{2,16}\);', master_cpu_use.stdout)
                    master_cpu_use = ''.join(master_cpu_use.stdout)
                if len(cc_cpu_use.stdout) < 52:
                    cc_cpu_use.stdout = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');,['', ]"
                else:
                    cc_cpu_use.stdout = re.sub('.*,\s,.*', '', cc_cpu_use.stdout)
                    cc_cpu_use.stdout = re.sub('.*,\s\].*', '', cc_cpu_use.stdout)
                    cc_cpu_use.stdout = cc_cpu_use.stdout.replace("\n", "")
                    cc_cpu_use.stdout = re.findall('data.addColumn.{0,52}\);|data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s' + starttime+'..*data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s'+endtime+'..{2,100}\);', cc_cpu_use.stdout)
                    cc_cpu_use.stdout = ''.join(cc_cpu_use.stdout)
                    cc_cpu_use.stdout = re.sub('data.addRow\(\[new\s.{10,60}(,\s){1,30}\]\);', '', cc_cpu_use.stdout)
                if True:
                    file = open(path+"/"+newnslogFile+"_cpu_Usage.html", "w")
                    file.write('''<html><head> <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script> <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.js"></script> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.css"> <script type="text/javascript">google.charts.load('current',{'packages': ['annotationchart']}); google.charts.setOnLoadCallback(mgmt_cpu_use);google.charts.setOnLoadCallback(master_cpu_use); google.charts.setOnLoadCallback(cc_cpu_use);function mgmt_cpu_use(){var data=new google.visualization.DataTable(); '''+mgmt_cpu_use + ''' var chart=new google.visualization.AnnotationChart(document.getElementById('mgmt_cpu')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}function master_cpu_use(){var data=new google.visualization.DataTable(); '''+master_cpu_use +
                               ''' var chart=new google.visualization.AnnotationChart(document.getElementById('master_cpu')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}function cc_cpu_use(){var data=new google.visualization.DataTable(); '''+cc_cpu_use.stdout+''' var chart=new google.visualization.AnnotationChart(document.getElementById('cc_cpu')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}</script></head><body> <h1 class="txt-primary">CPU Graph</h1> <hr> <p class="txt-title">Collector_Bundle_Name: '''+collector_bundle_name+'''<br>Device_Name: '''+adchostname+'''<br>Log_file: '''+"var/nslog/"+newnslogFile+'''<br>Log_Timestamp: '''+time_range+'''</p><hr><div style="width: 100%"><p class="txt-primary">mgmt_cpu_use</p><div id="mgmt_cpu" style="height:450px"></div><hr><div style="width: 100%"><p class="txt-primary">master_cpu_use</p><div id="master_cpu" style="height:450px"></div><hr><p class="txt-primary">cc_cpu_use</p><div id="cc_cpu" style="height:450px"></div></div><div class="footer">Project conFetch</div></body></html>''')
                    file.close()
                    print("Processed "+newnslogFile)
            finally:
                os.popen("fixperms ./conFetch").read()
                try:
                    fate_message = "show -g " + ''.join(args.K) ; send_request(version, username, url, fate_message, "Success")
                finally:
                    pass
        elif "ha" in args.g:
            try:
                time_range = sp.run(
                    "nsconmsg -K "+"var/nslog/"+newnslogFile+" -d setime | awk '!/Displaying|NetScaler|size|duration/{$1=$2=\"\"; printf \" --%s\", $0}' | sed -r 's/^.{9}//'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                ha_tot_pkt_rx_tx = sp.run("nsconmsg -K "+"var/nslog/"+newnslogFile+" -d current -s disptime=1 -g ha_tot_pkt_rx -g ha_tot_pkt_tx  |awk '/ha_tot/{print $8\"-\"$9\",\"$11\"-\"$10, $4, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                ha_err_heartbeat = sp.run("nsconmsg -K "+"var/nslog/"+newnslogFile+" -d current -s disptime=1 -g ha_err_heartbeat | awk '/ha_err_heartbeat/{print $8\"-\"$9\",\"$11\"-\"$10, $4, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                ha_tot_macresolve_requests = sp.run("nsconmsg -K "+"var/nslog/"+newnslogFile+" -d current -s disptime=1 -g ha_tot_macresolve_requests | awk '/ha_tot_macresolve_requests/{print $8\"-\"$9\",\"$11\"-\"$10, $4, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                if len(ha_tot_pkt_rx_tx.stdout) < 52:
                    ha_tot_pkt_rx_tx = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');,['', ]"
                else:
                    ha_tot_pkt_rx_tx.stdout = re.findall('data.addColumn.{0,52}\);|data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s' + starttime+'..*data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s'+endtime+'..{2,20}\);', ha_tot_pkt_rx_tx.stdout)
                    ha_tot_pkt_rx_tx = ''.join(
                        ha_tot_pkt_rx_tx.stdout)
                if len(ha_tot_macresolve_requests.stdout) < 52:
                    ha_tot_macresolve_requests = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');,['', ]"
                else:
                    ha_tot_macresolve_requests.stdout = re.findall('data.addColumn.{0,52}\);|data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s' + starttime+'..*data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s'+endtime+'..{2,20}\);', ha_tot_macresolve_requests.stdout)
                    ha_tot_macresolve_requests = ''.join(ha_tot_macresolve_requests.stdout)
                if len(ha_err_heartbeat.stdout) < 52:
                    ha_err_heartbeat = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');,['', ]"
                else:
                    ha_err_heartbeat.stdout = re.findall('data.addColumn.{0,52}\);|data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s' + starttime+'..*data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s'+endtime+'..{2,20}\);', ha_err_heartbeat.stdout)
                    ha_err_heartbeat = ''.join(ha_err_heartbeat.stdout)
                if True:
                    file = open(path+"/"+newnslogFile+"_HA.html", "w")
                file.write('''<html><head> <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script> <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.js"></script> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.css"> <script type="text/javascript">google.charts.load('current',{'packages': ['annotationchart']}); google.charts.setOnLoadCallback(ha_tot_pkt_rx_tx); google.charts.setOnLoadCallback(ha_err_heartbeat); google.charts.setOnLoadCallback(ha_tot_macresolve_requests); function ha_tot_pkt_rx_tx(){var data=new google.visualization.DataTable();'''+ha_tot_pkt_rx_tx + ''' var chart=new google.visualization.AnnotationChart(document.getElementById('ha_tot_pkt_rx_tx')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}function ha_err_heartbeat(){var data=new google.visualization.DataTable();'''+ha_err_heartbeat +
                           ''' var chart=new google.visualization.AnnotationChart(document.getElementById('ha_err_heartbeat')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}function ha_tot_macresolve_requests(){var data=new google.visualization.DataTable();'''+ha_tot_macresolve_requests + ''' var chart=new google.visualization.AnnotationChart(document.getElementById('ha_tot_macresolve_requests')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}</script></head><body> <h1 class="txt-primary">High Availability Graph</h1> <hr> <p class="txt-title">Collector_Bundle_Name: '''+collector_bundle_name+'''<br>Device_Name: '''+adchostname+'''<br>Log_file: '''+newnslogFile+'''<br>Log_Timestamp: '''+time_range+'''</p><hr> <div style="width: 100%"><p class="txt-primary">ha_tot_pkt_rx_tx</p><div id="ha_tot_pkt_rx_tx" style="height:450px"></div></div><div style="width: 100%"><p class="txt-primary">ha_err_heartbeat</p><div id="ha_err_heartbeat" style="height:450px"></div></div><div style="width: 100%"><p class="txt-primary">ha_tot_macresolve_requests</p><div id="ha_tot_macresolve_requests" style="height:450px"></div></div><div class="footer">Project conFetch</div></body></html>''')
                file.close()
                print("Processed "+newnslogFile)
            finally:
                os.popen("fixperms ./conFetch").read()
                try:
                    fate_message = "show -g " + ''.join(args.K) ; send_request(version, username, url, fate_message, "Success")
                finally:
                    pass
        elif "mem" in args.g:
            try:
                time_range = sp.run(
                    "nsconmsg -K "+"var/nslog/"+newnslogFile+" -d setime | awk '!/Displaying|NetScaler|size|duration/{$1=$2=\"\"; printf \" --%s\", $0}' | sed -r 's/^.{9}//'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                mem_cur_usedsize_freesize_avail = sp.run(
                    "nsconmsg -K "+"var/nslog/"+newnslogFile+" -d current -s disptime=1 -g mem_tot_avail -g mem_cur_usedsize -g mem_cur_freesize | awk '!/actual/&&/mem_cur/||/tot_available/{print $8\"-\"$9\",\"$11\"-\"$10, $3/1000000, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                if len(mem_cur_usedsize_freesize_avail.stdout) < 52:
                    mem_cur_usedsize_freesize_avail = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');,['', ]"
                else:
                    mem_cur_usedsize_freesize_avail.stdout = re.findall('data.addColumn.{0,52}\);|data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s' + starttime+'..*data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s'+endtime+'..{2,60}\);', mem_cur_usedsize_freesize_avail.stdout)
                    mem_cur_usedsize_freesize_avail = ''.join(mem_cur_usedsize_freesize_avail.stdout)
                if True:
                    file = open(path+"/"+newnslogFile+"_memory.html", "w")
                file.write('''<html><head> <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script> <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.js"></script> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.css"> <script type="text/javascript">google.charts.load('current',{'packages': ['annotationchart']}); google.charts.setOnLoadCallback(mem_free_used_avail); function mem_free_used_avail(){var data=new google.visualization.DataTable();'''+mem_cur_usedsize_freesize_avail +
                           ''' var chart=new google.visualization.AnnotationChart(document.getElementById('mem_free_used_avail')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}</script></head><body> <h1 class="txt-primary">Memory Graph</h1> <hr> <p class="txt-title">Collector_Bundle_Name: '''+collector_bundle_name+'''<br>Device_Name: '''+adchostname+'''<br>Log_file: '''+newnslogFile+'''<br>Log_Timestamp: '''+time_range+'''</p><hr> <div style="width: 100%"><p class="txt-primary">mem_cur_freesize - mem_cur_usedsize - mem_tot_available</p><div id="mem_free_used_avail" style="height:450px"></div></div><div class="footer">Project conFetch</div></body></html>''')
                file.close()
                print("Processed "+newnslogFile)
            finally:
                os.popen("fixperms ./conFetch").read()
                try:
                    fate_message = "show -g " + ''.join(args.K) ; send_request(version, username, url, fate_message, "Success")
                finally:
                    pass
        elif "nic" in args.g:
            try:
                time_range = sp.run(
                    "nsconmsg -K "+"var/nslog/"+newnslogFile+" -d setime | awk '!/Displaying|NetScaler|size|duration/{$1=$2=\"\"; printf \" --%s\", $0}' | sed -r 's/^.{9}//'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                allnic_tot_rx_tx_mbits = sp.run(
                    "nsconmsg -K "+"var/nslog/"+newnslogFile+" -d current -s disptime=1 -g allnic_tot_rx_mbits -g allnic_tot_tx_mbits | awk '!/actual/&&/allnic_tot/||/tot_available/{print $8\"-\"$9\",\"$11\"-\"$10, $3/1000000, $6}' | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g' | tr -d '\\n'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                if len(allnic_tot_rx_tx_mbits.stdout) < 52:
                    allnic_tot_rx_tx_mbits = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');,['', ]"
                else:
                    allnic_tot_rx_tx_mbits.stdout = re.findall('data.addColumn.{0,52}\);|data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s' + starttime+'..*data.addRow\(\[new Date\(\\\'[a-zA-Z]{3}\s[0-9]{0,2},[0-9]{4}\s'+endtime+'..{2,60}\);', allnic_tot_rx_tx_mbits.stdout)
                    allnic_tot_rx_tx_mbits = ''.join(allnic_tot_rx_tx_mbits.stdout)
                if True:
                    allnic_tot_rx_tx_mbits = re.sub('data.addRow\(\[new\s.{10,60}(,\s){1,30}\]\);', '', allnic_tot_rx_tx_mbits)
                    file = open(path+"/"+newnslogFile+"_nic.html", "w")
                file.write('''<html><head> <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script> <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.js"></script> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.css"> <script type="text/javascript">google.charts.load('current',{'packages': ['annotationchart']}); google.charts.setOnLoadCallback(allnic_tot_rx_tx_mbits); function allnic_tot_rx_tx_mbits(){var data=new google.visualization.DataTable();'''+allnic_tot_rx_tx_mbits +
                           ''' var chart=new google.visualization.AnnotationChart(document.getElementById('allnic_tot_rx_tx_mbits')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}</script></head><body> <h1 class="txt-primary">NIC Graph</h1> <hr> <p class="txt-title">Collector_Bundle_Name: '''+collector_bundle_name+'''<br>Device_Name: '''+adchostname+'''<br>Log_file: '''+newnslogFile+'''<br>Log_Timestamp: '''+time_range+'''</p><hr> <div style="width: 100%"><p class="txt-primary">allnic_tot_tx_mbits - allnic_tot_rx_mbits</p><div id="allnic_tot_rx_tx_mbits" style="height:450px"></div></div><div class="footer">Project conFetch</div></body></html>''')
                file.close()
                print("Processed "+newnslogFile)
            finally:
                os.popen("fixperms ./conFetch").read()
                try:
                    fate_message = "show -g " + ''.join(args.K) ; send_request(version, username, url, fate_message, "Success")
                finally:
                    pass
    finally:
        pass
elif args.z:
    try:
        if args.divide:
            try:
                divide = int(''.join(args.divide))
                divide = str(divide)
            except ValueError:
                div_error = ''.join(args.divide)
                print(style.RED + f'{div_error} is not a integer, please use integer and try again.' + style.RESET)
                quit()
        else:
            divide = str(1)
        custom_counter = ""
        raw_output = ""
        adchostname = sp.run("awk '{printf $2}' shell/uname-a.out", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        collector_bundle_name = sp.run("pwd", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout.split("/")[4]
        counter_name = ''.join(args.z)
        all_newnslog_names = sp.run('''ls -lah var/nslog/ | awk \'/newnslog\./&&!/gz|tar/{print $NF}END{print "newnslog"}\'''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        num_columns = sp.run('''nsconmsg -K var/nslog/newnslog -d current -s disptime=1 -f ''' + counter_name + ''' | awk \'/''' + counter_name + '''/{print NF; exit}\'''', shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        start_time = sp.run("nsconmsg -K \"var/nslog/$(ls -lah var/nslog/ | awk '/newnslog\./&&!/gz|tar/{print $NF;exit}')\" -d setime | awk '/start time/{print $4, $5, $6, $7}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        end_time = sp.run("nsconmsg -K \"var/nslog/newnslog\" -d setime | awk '/end   time/{print $4, $5, $6, $7}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        start_end = f'{start_time} to {end_time}'
        raw_file_path = str("conFetch/raw_"+counter_name+".txt")
        try:
            if int(num_columns) == 12:
                for nslog in all_newnslog_names.splitlines():
                    custom_counter_output = sp.run("nsconmsg -K var/nslog/"+nslog+" -d current -s disptime=1 -f "+counter_name+" | awk '!/partition/&&/"+counter_name+"/{print $9\"-\"$10\",\"$12\"-\"$11, $3/"+divide+", $7}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    raw_output += custom_counter_output
                    with open(raw_file_path, "w") as file:
                        file.write(raw_output)
                custom_counter = sp.run("cat "+raw_file_path+" | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                remove_tmp_file = sp.run("rm -rf "+raw_file_path+"", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                if len(custom_counter) < 52:
                        custom_counter = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');,['', ]"
                else:
                    pass
                custom_counter = re.sub('.*,\s\].*', '', custom_counter)
                file = open(path+"/"+counter_name+"_Graph.html", "w")
                file.write('''<html><head> <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script> <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.js"></script> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.css"> <script type="text/javascript">google.charts.load('current',{'packages': ['annotationchart']}); google.charts.setOnLoadCallback(allnic_tot_rx_tx_mbits); function allnic_tot_rx_tx_mbits(){var data=new google.visualization.DataTable(); ''' + custom_counter +
                            ''' var chart=new google.visualization.AnnotationChart(document.getElementById('allnic_tot_rx_tx_mbits')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}</script></head><body> <h1 class="txt-primary">'''+counter_name+'''</h1> <hr> <p class="txt-title">Collector_Bundle_Name: '''+collector_bundle_name+'''<br>Device_Name: '''+adchostname+'''<br>Log_file: All newnslogs<br>Log_Timestamp: '''+start_end+'''</p><hr> <div style="width: 100%"><p class="txt-primary">'''+ counter_name +''' Graph</p><div id="allnic_tot_rx_tx_mbits" style="height:450px"></div></div><div class="footer">Project conFetch</div></body></html>''')
                file.close()
                single_line_out = sp.run("perl -p -e 's/(?<!>)\n//g' conFetch/"+counter_name+"_Graph.html > temp_file.html && mv temp_file.html conFetch/"+counter_name+"_Graph.html", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                os.popen("fixperms ./conFetch/").read()
                print(style.GREEN + f'Processed {counter_name} Graph for all newnslogs' + style.RESET)
                try:
                    fate_message = "show -z " + ''.join(args.z); send_request(version, username, url, fate_message, "Success")
                finally:
                    pass
            elif int(num_columns) == 11:
                for nslog in all_newnslog_names.splitlines():
                    custom_counter_output = sp.run("nsconmsg -K var/nslog/"+nslog+" -d current -s disptime=1 -f "+counter_name+" | awk '!/partition/&&/"+counter_name+"/{print $8\"-\"$9\",\"$11\"-\"$10, $3/"+divide+", $6}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    raw_output += custom_counter_output
                    with open(raw_file_path, "w") as file:
                        file.write(raw_output)
                custom_counter = sp.run("cat "+raw_file_path+" | awk 'BEGIN {;OFS = \", \";};!seen[$1]++ {;times[++numTimes] = $1;};!seen[$3]++ {;cpus[++numCpus] = $3;};{;vals[$1,$3] = $2;};END {;printf \"data.addColumn(\\047%s\\047%s\\047Manjesh\\047);\\n\", \"date\", OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];printf \"data.addColumn(\\047number\\047,\\047%s\\047%s);\\n\", cpu, (cpuNr<numCpus ? OFS : \"\");};for ( timeNr=1; timeNr<=numTimes; timeNr++ ) {;time = times[timeNr];printf \"%sdata.addRow([new Date(\\047%s\\047)%s\", ORS, time, OFS;for ( cpuNr=1; cpuNr<=numCpus; cpuNr++ ) {;cpu = cpus[cpuNr];val = ( (time,cpu) in vals ? vals[time,cpu] : prev_vals[cpu] );printf \"%s%s\", val, (cpuNr<numCpus ? OFS : \"]);\");prev_vals[cpu] = val;};};print \"\";}' | sed 's/-/ /g'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                remove_tmp_file = sp.run("rm -rf "+raw_file_path+"", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                if len(custom_counter) < 52:
                        custom_counter = "data.addColumn('date', 'Manjesh');data.addColumn('Manjesh', 'Manjesh');,['', ]"
                else:
                    pass
                custom_counter = re.sub('.*,\s\].*', '', custom_counter)
                file = open(path+"/"+counter_name+"_Graph.html", "w")
                file.write('''<html><head> <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script> <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.js"></script> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/manjesh23/CitrixNSConfig@9bc88cdd9bf82282eacd2babf714a1d8a5d00358/scripts4internal/conFetch.css"> <script type="text/javascript">google.charts.load('current',{'packages': ['annotationchart']}); google.charts.setOnLoadCallback(allnic_tot_rx_tx_mbits); function allnic_tot_rx_tx_mbits(){var data=new google.visualization.DataTable(); ''' + custom_counter +
                            ''' var chart=new google.visualization.AnnotationChart(document.getElementById('allnic_tot_rx_tx_mbits')); var options={displayAnnotations: true, displayZoomButtons: false, dateFormat: 'HH:mm:ss MMMM dd, yyyy', thickness: 2,}; chart.draw(data, options);}</script></head><body> <h1 class="txt-primary">'''+counter_name+'''</h1> <hr> <p class="txt-title">Collector_Bundle_Name: '''+collector_bundle_name+'''<br>Device_Name: '''+adchostname+'''<br>Log_file: All newnslogs<br>Log_Timestamp: '''+start_end+'''</p><hr> <div style="width: 100%"><p class="txt-primary">'''+ counter_name +''' Graph</p><div id="allnic_tot_rx_tx_mbits" style="height:450px"></div></div><div class="footer">Project conFetch</div></body></html>''')
                file.close()
                single_line_out = sp.run("perl -p -e 's/(?<!>)\n//g' conFetch/"+counter_name+"_Graph.html > temp_file.html && mv temp_file.html conFetch/"+counter_name+"_Graph.html", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                os.popen("fixperms ./conFetch/").read()
                print(style.GREEN + f'Processed {counter_name} Graph for all newnslogs' + style.RESET)
                try:
                    fate_message = "show -z " + ''.join(args.z); send_request(version, username, url, fate_message, "Success")
                finally:
                    pass
        except ValueError:
            print(style.RED + f'Please check the counter name once again !!!' + style.RESET)
            try:
                fate_message = "show -z " + ''.join(args.z); send_request(version, username, url, fate_message, "Failed")
            finally:
                pass
    finally:
        pass
elif args.T:
    try:
        path = "conFetch"
        isExist = os.path.exists(path)
        if not isExist:
            os.popen("fixperms $PWD").read()
            os.makedirs(path)
        else:
            pass
        if 'ha' in args.T:
            raw_file_path = str("conFetch/ha.dot")
            try:
                old_working_dir = os.getcwd()
                peer_ip = sp.run("sed -n '/Node in this Master State/,/SSL Card Status/p' shell/showcmds.txt | awk '/IP/{printf $NF}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                pair_bundle = sp.run("ls -lah .. | awk '/"+peer_ip+"/&&/drwxrwxrwx/&&/collector_/{printf $NF; exit}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                cur_bundle_name = sp.run("pwd", shell=True, text=True, capture_output=True).stdout
                cur_bundle_name = re.search(r"collector_.*_[0-9]{2}", cur_bundle_name).group(0)
                cur_hb_received = sp.run("awk '/Heartbeats received/{print \"HB received:\", $NF; exit}' shell/statcmds.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                cur_hb_sent = sp.run("awk '/Heartbeats received/{print \"HB sent:\", $NF; exit}' shell/statcmds.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                cur_version = sp.run("awk '/Build/&&/#NS/{gsub(/[^0-9]+/, \" \"); gsub(/ /, \".\"); sub(/^./, \"\"); printf $0; exit}' shell/ns_running_config.conf", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                cur_master_node_state = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '!/for/&&(/Node State/||/Master State/){printf \"%s%s\", sep, $3; sep=\" | \"} END {printf \"\\n\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                cur_ip_name = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/IP:/{print $2, $3}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                cur_sync_prop = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/Propagation/||/Sync State:/{printf \"%s%s\", sep, $0; sep=\" | \"} END {printf \"\\n\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                cur_ena_dis_Interfaces = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/Interfaces/&&/(Enabled|Disabled)/{printf \"%s%s\", sep, $0; sep=\" | \"} END {printf \"\\n\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                cur_beat_mon_Interfaces = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/Interfaces/&&/HA/{printf \"%s%s\", sep, $0; sep=\" | \"} END {printf \"\\n\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                cur_beat_notseen = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/Interfaces on which heartbeats are not seen/{printf}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                cur_ss_card = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/SSL Card Status/{printf}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                cur_intervals = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/Interval/{printf \"%s%s\", sep, $0; sep=\" | \"} END {printf \"\\n\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                cur_node_in_state = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/Node in this Master State/{printf}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                os.chdir("../"+pair_bundle)
                peer_bundle_name = sp.run("pwd", shell=True, text=True, capture_output=True).stdout
                peer_bundle_name = re.search(r"collector_.*_[0-9]{2}", peer_bundle_name).group(0)
                peer_hb_received = sp.run("awk '/Heartbeats received/{print \"HB received:\", $NF; exit}' shell/statcmds.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                peer_hb_sent = sp.run("awk '/Heartbeats received/{print \"HB sent:\", $NF; exit}' shell/statcmds.txt", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                peer_version = sp.run("awk '/Build/&&/#NS/{gsub(/[^0-9]+/, \" \"); gsub(/ /, \".\"); sub(/^./, \"\"); printf $0; exit}' shell/ns_running_config.conf", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                peer_master_node_state = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '!/for/&&(/Node State/||/Master State/){printf \"%s%s\", sep, $3; sep=\" | \"} END {printf \"\\n\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                peer_ip_name = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/IP:/{print $2, $3}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                peer_sync_prop = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/Propagation/||/Sync State:/{printf \"%s%s\", sep, $0; sep=\" | \"} END {printf \"\\n\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                peer_ena_dis_Interfaces = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/Interfaces/&&/(Enabled|Disabled)/{printf \"%s%s\", sep, $0; sep=\" | \"} END {printf \"\\n\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                peer_beat_mon_Interfaces = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/Interfaces/&&/HA/{printf \"%s%s\", sep, $0; sep=\" | \"} END {printf \"\\n\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                peer_beat_notseen = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/Interfaces on which heartbeats are not seen/{printf}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                peer_ss_card = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/SSL Card Status/{printf}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                peer_intervals = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/Interval/{printf \"%s%s\", sep, $0; sep=\" | \"} END {printf \"\\n\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                peer_node_in_state = sp.run("sed -n '/exec: show HA node/,/Node in this Master State/p' shell/showcmds.txt | awk '/Node in this Master State/{printf}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                os.chdir(old_working_dir)
            finally:
                ha_pair_bundle_name = f'{cur_bundle_name} and {peer_bundle_name}'
                dot_data = f'''
                digraph NetScaler {{
                    label="{ha_pair_bundle_name}"
                    graph [
                        rankdir = "LR"
                    ]

                    node [
                        shape = record
                    ]

                    Primary[
                        label="{{{cur_ip_name}}} | {{{cur_version}}}| {{{cur_master_node_state}}} | {{{cur_sync_prop}}}  | {{{cur_ena_dis_Interfaces}}} | {{{cur_beat_mon_Interfaces}}} | {{{cur_beat_notseen}}} | {{{cur_ss_card}}} | {{{cur_intervals}}} | {{{cur_node_in_state}}} | {{{cur_hb_received + " - " + cur_hb_sent}}}"
                    ]

                    Secondary[
                        label="{{{peer_ip_name}}} | {{{peer_version}}} | {{{peer_master_node_state}}} | {{{peer_sync_prop}}}  | {{{peer_ena_dis_Interfaces}}} | {{{peer_beat_mon_Interfaces}}} | {{{peer_beat_notseen}}} | {{{peer_ss_card}}} | {{{peer_intervals}}} | {{{peer_node_in_state}}} | {{{peer_hb_received + " - " + peer_hb_sent}}}"
                    ]

                    Primary -> Secondary[label="HA Pair"]
                }}'''
                with open(raw_file_path, "w") as file:
                        file.write(dot_data)
                sp.run("dot -Tpng ha.dot -o ha.png", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                os.popen("dot -Tpng conFetch/ha.dot -o conFetch/ha.png").read()
                os.popen("fixperms $PWD").read()
                os.popen("rm -rf conFetch/ha.dot").read()
    finally:
        fate_message = "show -T " + ''.join(args.T); send_request(version, username, url, fate_message, "Success")
elif args.cpu:
    try:
        mgmtcpu100 = sp.run("for i in $(ls -lah var/nslog/ | awk '/drwxrwxrwx/&&/newnslog./{print \"var/nslog/\"$NF}END{print \"var/nslog/newnslog\"}'); do printf \"newnslog name: %s\\n\" $i; nsconmsg -K $i -d current -s disptime=1 -f mgmt_cpu_use 2>&1 | awk '/mgmt_cpu_use/{if ($3/10 == 100) printf \"%s %s %s\\n\", $8, $9, $10}'; done", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
    finally:
        if len(mgmtcpu100) > 1:
            print(style.YELLOW + '{:-^87}'.format('NetScaler Mgmt CPU at 100% and its breakup') + "\n" + style.RESET)
            pattern = r'[a-zA-Z]{3} [0-9]{2} [0-9:]{7}.'
            matches = re.findall(pattern, mgmtcpu100)
            for match in matches:
                matchandprolog_out = sp.run("sed -n '/" + match[:-1] + "/,+50p' var/nsproflog/* | awk 'BEGIN{printf \"%s\\t%s\\n\", \"CPU%\", \"Related process\"}$6 ~ /^[0-9]*(\.[0-9]+)?$/ && $5 >= 5 {$1=$2=$3=$4=$6=$7=$8=\"\"; print}' | sed -e 's/^[ \\t]*//'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                if len(matchandprolog_out) > 25:
                    print(style.YELLOW + "NetScaler mgmt CPU was at 100% around " + match + "\n" + style.RESET + matchandprolog_out)
                else:
                    print(style.YELLOW + "NetScaler mgmt CPU was at 100% around " + match + "\n" + style.RESET)
        else:
            print(style.YELLOW + '{:-^87}'.format('NetScaler Mgmt CPU at 100% and its breakup') + "\n" + style.RESET)
            print(style.RED + "NetScaler has not hit 100% mgmt CPU")

elif args.mem:
    try:
        print(style.YELLOW + '{:-^87}'.format('NetScaler Mem Pool more than 20% and its breakup') + "\n" + style.RESET)
        out_dir = 'conFetch/nsconmsg/'
        matching_newnslog_files = glob(os.path.join('./var/nslog/', 'newnslog*'))  
        if matching_newnslog_files:
            mem_stats_table = []
            keys_to_extract = ['netscaler_netaddress', 'sys_cur_nsbs', 'sys_cur_freensbs', 'mem_system_page_size', 'mem_tot_recovery_done', 'mem_tot_pages_recovered', 'mem_err_recovery_timeout']
            for newnslog in matching_newnslog_files:
                newnslog_out_file = os.path.join(out_dir, f"{newnslog}_memstats.txt")
                memstats_output = sp.run(f"nsconmsg -K {newnslog} -d memstats", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
                finalstats_output = sp.run(f"nsconmsg -K {newnslog} -d finalstats -g netscaler_netaddress -g sys_cur_nsbs -g sys_cur_freensbs -g mem_system_page_size -g mem_tot_recovery_done -g mem_tot_pages_recovered -g mem_err_recovery_timeout | awk '/netscaler/||/mem_/||/sys_/{{print $NF, $(NF-1)}}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                finalstats_dict = dict(line.split() for line in finalstats_output.splitlines() if line.strip())
                row = [newnslog]
                for key in keys_to_extract:
                    row.append(finalstats_dict.get(key, "Not found"))
                mem_stats_table.append(row)
                start_time = sp.run(f"nsconmsg -K {newnslog} -d setime | awk '/start time/{{print $4, $5, $6, $7}}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                end_time = sp.run(f"nsconmsg -K {newnslog} -d setime | awk '/end   time/{{print $4, $5, $6, $7}}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                start_end = f'{start_time.strip()} to {end_time.strip()}'
                if memstats_output.returncode == 0:
                    print(style.YELLOW + "----------" + newnslog + "----------\n" + style.RESET)
                    print("Timestamp: " + style.GREEN + start_end + "\n" + style.RESET)
                    current_alloc = sp.run(f"echo '{memstats_output.stdout}' | awk '/MEM_/' | sed 's/[()%]/ /g' | awk '{{if ($5 > 10) printf \"%s \\033[31m%s\\033[0m\\n\", $1, $5}}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    memstats_ErrLmtFailed = sp.run(f"echo '{memstats_output.stdout}' | awk '/MEM_/{{if ($(NF-2) > 1) printf \"%s \\033[31m%s\\033[0m\\n\", $1, $(NF-2)}}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    memstats_ErrAllocFailed = sp.run(f"echo '{memstats_output.stdout}' | awk '/MEM_/{{if ($(NF-1) > 1) printf \"%s \\033[31m%s\\033[0m\\n\", $1, $(NF-1)}}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    memstats_ErrFreeFailed = sp.run(f"echo '{memstats_output.stdout}' | awk '/MEM_/{{if ($NF > 1) printf \"%s \\033[31m%s\\033[0m\\n\", $1, $NF}}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                    if len(memstats_ErrLmtFailed):
                        print(style.YELLOW + "Memeory Error Limit Failed Pools:" + style.RESET)
                        print(memstats_ErrLmtFailed)
                    elif len(memstats_ErrAllocFailed):
                        print(style.YELLOW + "Memeory Error Alloc Failed Pools:" + style.RESET)
                        print(memstats_ErrAllocFailed)
                    elif len(memstats_ErrFreeFailed):
                        print(style.YELLOW + "Memeory Error Free Failed Pools:" + style.RESET)
                        print(memstats_ErrFreeFailed)
                    if "MEM_TBUF" in current_alloc:
                        print(style.YELLOW + "MEM_TBUF is greater than 10%" + style.RESET)
                        print(current_alloc)
                        bm_members = sp.run(f"echo '{memstats_output.stdout}' | awk '/TBUF_POOL_MEMBERS/,/BM16384/' | sed 's/[()%]/ /g' | awk '!/Name/{{if ($5 > 5) printf \"%s \\033[31m%s\\033[0m\\n\", $1, $5}}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
                        if "BM" in bm_members:
                            print(style.YELLOW + "\nMEM_TBUF Pool Members greater than 5%:" + style.RESET)
                            print(bm_members + "\n")
                        else:
                            print("No BM members greater than 5% found.\n")                    
                else:
                    print(style.RED + f"Failed to retrieve memstats from {newnslog}. Error: {memstats_output.stderr}" + style.RESET)
        else:
            print("No newnslog files found.")
    finally:
        if mem_stats_table:
            fate_message = "show --mem"; send_request(version, username, url, fate_message, "Success")
            print(f"{'Newnslog File':<30} {'netscaler_netaddress':<20} {'sys_cur_nsbs':<15} {'sys_cur_freensbs':<18} {'mem_system_page_size':<20} {'mem_tot_recovery_done':<20} {'mem_tot_pages_recovered':<20} {'mem_err_recovery_timeout':<25}")
            print("-" * 160)
            for row in mem_stats_table:
                print(f"{row[0]:<30} {row[1]:<20} {row[2]:<15} {row[3]:<18} {row[4]:<20} {row[5]:<20} {row[6]:<20} {row[7]:<25}")
        else:
            print(style.RED + "No finalstats data to display." + style.RESET)
            fate_message = "show --mem"; send_request(version, username, url, fate_message, "Failed")
            quit()

elif args.nic:
    try:
        lic_throughput = sp.run("nsconmsg -K var/nslog/newnslog -d stats -f sys_licensed_throughput | awk '/sys_licensed_throughput/{printf $3}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        max_rx_throughput = sp.run("for i in $(ls -lah var/nslog/ | awk '/newnslo/{print \"var/nslog/\"$NF}'); do nsconmsg -K $i -d maxrate -f allnic_tot_rx_mbits; done | awk '/allnic_tot_rx_mbits/{printf $2; exit}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        #iface_speed = sp.run("nsconmsg -K var/nslog/newnslog -d finalstats | awk '/nic_info_throughput/{print $NF, \"-->\", $3/1000, \"Gbits\"}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
        all_nic_counter = sp.run("nsconmsg -K var/nslog/newnslog -d finalstats -g nic_ | awk '/nic/{$1=$2=\"\"; print $0}'", shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE).stdout
    finally:
        print(style.YELLOW + '{:-^87}'.format('NetScaler NIC Details') + "\n" + style.RESET)
        print("Licensed Throughput: " + lic_throughput + " Mbps")
        print("Max Throughput received on all nic's: " + max_rx_throughput + " Mbytes\n")
        #print(style.GREEN + "Throughput did not exceed system license\n" + style.RESET if int(lic_throughput) > int(max_rx_throughput) else style.RED + "Throughput exceeded system license\n" + style.RESET)
        if max_rx_throughput and lic_throughput and int(lic_throughput) > int(max_rx_throughput):
            print(style.GREEN + "Throughput did not exceed system license\n" + style.RESET)
        elif max_rx_throughput:
            print(style.RED + "Throughput exceeded system license\n" + style.RESET)
        else:
            print("Max Throughput not available")
        result_dict = {}
        # Use a single loop for all three categories
        for match in re.finditer(r'(\w.*|\d.*)\s+(nic_cur_MAC_addr|nic_info_mtu|nic_cur_link_uptime|nic_cur_link_downtime|nic_info_throughput|nic_conf_vlan|nic_tot_rx_packets|nic_tot_tx_packets|nic_tot_rx_mbits|nic_tot_tx_mbits)\s+interface\((\S+)\)', all_nic_counter):
            value, category, interface = match.groups()
            result_dict.setdefault(interface, {})[category] = value
        # Display headers
        print(f"{'Interface':<10}\t{'nic_cur_MAC_addr':<15}\t{'nic_info_mtu':<15}\t{'nic_cur_link_uptime':<15}\t{'nic_cur_link_downtime':<15}\t{'nic_info_throughput':<20}\t{'nic_conf_vlan':<15}\t{'nic_tot_rx_packets':<15}\t{'nic_tot_tx_packets':<15}\t{'nic_tot_rx_mbits':<15}\t{'nic_tot_tx_mbits':<15}")
        print("------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
        # Display row values with auto-alignment
        for interface, values in result_dict.items():
            nic_cur_MAC_addr_value = values.get('nic_cur_MAC_addr', 'NA')
            tot_rx_pkts_value = values.get('nic_tot_rx_packets', 'NA')
            tot_tx_pkts_value = values.get('nic_tot_tx_packets', 'NA')
            tot_rx_mbits_value = values.get('nic_tot_rx_mbits', 'NA')
            tot_tx_mbits_value = values.get('nic_tot_tx_mbits', 'NA')
            throughput_value = values.get('nic_info_throughput', '')
            throughput_value = f"{int(throughput_value) / 1000} Gbps" if throughput_value else 'NA'
            mtu_value = values.get('nic_info_mtu', 'NA')
            nic_cur_link_uptime_value = values.get('nic_cur_link_uptime', 'NA')
            nic_cur_link_downtime_value = values.get('nic_cur_link_downtime', 'NA')
            if "NA" not in nic_cur_link_uptime_value:
                nic_cur_link_uptime_value = f"{round(int(nic_cur_link_uptime_value) / 60)}" + " Mins, " + f"{int(nic_cur_link_uptime_value) % 60}" + " Sec"
            if "NA" not in nic_cur_link_downtime_value:
                nic_cur_link_downtime_value = f"{round(int(nic_cur_link_downtime_value) / 60)}" + " Mins " + f"{int(nic_cur_link_downtime_value) % 60}" + " Sec"
            nic_conf_vlan_value = values.get('nic_conf_vlan', 'NA')
            print(f"{interface:<10}\t{nic_cur_MAC_addr_value:<15}\t{mtu_value:<15}\t{nic_cur_link_uptime_value:<20}\t{nic_cur_link_downtime_value:<20}\t{throughput_value:<20}\t{nic_conf_vlan_value:<15}\t{tot_rx_pkts_value:<20}\t{tot_tx_pkts_value:<20}\t{tot_rx_mbits_value:<20}\t{tot_tx_mbits_value:<15}")
        try:
            fate_message = "show --nic"; send_request(version, username, url, fate_message, "Success")
        finally:
            pass
        
else:
    print("Please use -h for help")
    logger.error(os.getcwd() + " - No switch")
    try:
        fate_message = "No Switch Used"; send_request(version, username, url, fate_message, "Error")
    finally:
        quit()
